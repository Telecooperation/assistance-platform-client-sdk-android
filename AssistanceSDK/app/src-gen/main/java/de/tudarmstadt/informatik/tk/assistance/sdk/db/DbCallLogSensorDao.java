package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "call_log_sensor".
*/
public class DbCallLogSensorDao extends AbstractDao<DbCallLogSensor, Long> {

    public static final String TABLENAME = "call_log_sensor";

    /**
     * Properties of entity DbCallLogSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public static final Property Id = new Property(0, Long.class, "id", true, "_id");
        public static final Property CallId = new Property(1, Long.class, "callId", false, "CALL_ID");
        public static final Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public static final Property Name = new Property(3, String.class, "name", false, "NAME");
        public static final Property Number = new Property(4, String.class, "number", false, "NUMBER");
        public static final Property Date = new Property(5, Long.class, "date", false, "DATE");
        public static final Property Duration = new Property(6, Long.class, "duration", false, "DURATION");
        public static final Property IsNew = new Property(7, Boolean.class, "isNew", false, "IS_NEW");
        public static final Property IsUpdated = new Property(8, Boolean.class, "isUpdated", false, "IS_UPDATED");
        public static final Property IsDeleted = new Property(9, Boolean.class, "isDeleted", false, "IS_DELETED");
        public static final Property Created = new Property(10, String.class, "created", false, "CREATED");
        public static final Property DeviceId = new Property(11, Long.class, "deviceId", false, "DEVICE_ID");
    }

    private DaoSession daoSession;


    public DbCallLogSensorDao(DaoConfig config) {
        super(config);
    }
    
    public DbCallLogSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"call_log_sensor\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CALL_ID\" INTEGER," + // 1: callId
                "\"TYPE\" INTEGER," + // 2: type
                "\"NAME\" TEXT," + // 3: name
                "\"NUMBER\" TEXT," + // 4: number
                "\"DATE\" INTEGER," + // 5: date
                "\"DURATION\" INTEGER," + // 6: duration
                "\"IS_NEW\" INTEGER," + // 7: isNew
                "\"IS_UPDATED\" INTEGER," + // 8: isUpdated
                "\"IS_DELETED\" INTEGER," + // 9: isDeleted
                "\"CREATED\" TEXT NOT NULL ," + // 10: created
                "\"DEVICE_ID\" INTEGER);"); // 11: deviceId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_call_log_sensor__id ON call_log_sensor" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_call_log_sensor_DEVICE_ID ON call_log_sensor" +
                " (\"DEVICE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"call_log_sensor\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbCallLogSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long callId = entity.getCallId();
        if (callId != null) {
            stmt.bindLong(2, callId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(5, number);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(7, duration);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(8, isNew ? 1L: 0L);
        }
 
        Boolean isUpdated = entity.getIsUpdated();
        if (isUpdated != null) {
            stmt.bindLong(9, isUpdated ? 1L: 0L);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(10, isDeleted ? 1L: 0L);
        }
        stmt.bindString(11, entity.getCreated());
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(12, deviceId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbCallLogSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long callId = entity.getCallId();
        if (callId != null) {
            stmt.bindLong(2, callId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(5, number);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(7, duration);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(8, isNew ? 1L: 0L);
        }
 
        Boolean isUpdated = entity.getIsUpdated();
        if (isUpdated != null) {
            stmt.bindLong(9, isUpdated ? 1L: 0L);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(10, isDeleted ? 1L: 0L);
        }
        stmt.bindString(11, entity.getCreated());
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(12, deviceId);
        }
    }

    @Override
    protected final void attachEntity(DbCallLogSensor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbCallLogSensor readEntity(Cursor cursor, int offset) {
        DbCallLogSensor entity = new DbCallLogSensor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // callId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // number
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isNew
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isUpdated
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isDeleted
            cursor.getString(offset + 10), // created
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // deviceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbCallLogSensor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCallId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setIsNew(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsUpdated(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsDeleted(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setCreated(cursor.getString(offset + 10));
        entity.setDeviceId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbCallLogSensor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbCallLogSensor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbCallLogSensor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbDeviceDao().getAllColumns());
            builder.append(" FROM call_log_sensor T");
            builder.append(" LEFT JOIN device T0 ON T.\"DEVICE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbCallLogSensor loadCurrentDeep(Cursor cursor, boolean lock) {
        DbCallLogSensor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbDevice dbDevice = loadCurrentOther(daoSession.getDbDeviceDao(), cursor, offset);
        entity.setDbDevice(dbDevice);

        return entity;    
    }

    public DbCallLogSensor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            }
            if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbCallLogSensor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbCallLogSensor> list = new ArrayList<>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbCallLogSensor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbCallLogSensor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

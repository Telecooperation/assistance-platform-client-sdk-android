package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "magnetic_field_sensor".
*/
public class DbMagneticFieldSensorDao extends AbstractDao<DbMagneticFieldSensor, Long> {

    public static final String TABLENAME = "magnetic_field_sensor";

    /**
     * Properties of entity DbMagneticFieldSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public static final Property Id = new Property(0, Long.class, "id", true, "_id");
        public static final Property X = new Property(1, Double.class, "x", false, "X");
        public static final Property Y = new Property(2, Double.class, "y", false, "Y");
        public static final Property Z = new Property(3, Double.class, "z", false, "Z");
        public static final Property Created = new Property(4, String.class, "created", false, "CREATED");
        public static final Property Accuracy = new Property(5, Integer.class, "accuracy", false, "ACCURACY");
        public static final Property XUncalibratedNoHardIron = new Property(6, Float.class, "xUncalibratedNoHardIron", false, "X_UNCALIBRATED_NO_HARD_IRON");
        public static final Property YUncalibratedNoHardIron = new Property(7, Float.class, "yUncalibratedNoHardIron", false, "Y_UNCALIBRATED_NO_HARD_IRON");
        public static final Property ZUncalibratedNoHardIron = new Property(8, Float.class, "zUncalibratedNoHardIron", false, "Z_UNCALIBRATED_NO_HARD_IRON");
        public static final Property XUncalibratedEstimatedIronBias = new Property(9, Float.class, "xUncalibratedEstimatedIronBias", false, "X_UNCALIBRATED_ESTIMATED_IRON_BIAS");
        public static final Property YUncalibratedEstimatedIronBias = new Property(10, Float.class, "yUncalibratedEstimatedIronBias", false, "Y_UNCALIBRATED_ESTIMATED_IRON_BIAS");
        public static final Property ZUncalibratedEstimatedIronBias = new Property(11, Float.class, "zUncalibratedEstimatedIronBias", false, "Z_UNCALIBRATED_ESTIMATED_IRON_BIAS");
        public static final Property DeviceId = new Property(12, Long.class, "deviceId", false, "DEVICE_ID");
    }

    private DaoSession daoSession;


    public DbMagneticFieldSensorDao(DaoConfig config) {
        super(config);
    }
    
    public DbMagneticFieldSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"magnetic_field_sensor\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"X\" REAL," + // 1: x
                "\"Y\" REAL," + // 2: y
                "\"Z\" REAL," + // 3: z
                "\"CREATED\" TEXT NOT NULL ," + // 4: created
                "\"ACCURACY\" INTEGER," + // 5: accuracy
                "\"X_UNCALIBRATED_NO_HARD_IRON\" REAL," + // 6: xUncalibratedNoHardIron
                "\"Y_UNCALIBRATED_NO_HARD_IRON\" REAL," + // 7: yUncalibratedNoHardIron
                "\"Z_UNCALIBRATED_NO_HARD_IRON\" REAL," + // 8: zUncalibratedNoHardIron
                "\"X_UNCALIBRATED_ESTIMATED_IRON_BIAS\" REAL," + // 9: xUncalibratedEstimatedIronBias
                "\"Y_UNCALIBRATED_ESTIMATED_IRON_BIAS\" REAL," + // 10: yUncalibratedEstimatedIronBias
                "\"Z_UNCALIBRATED_ESTIMATED_IRON_BIAS\" REAL," + // 11: zUncalibratedEstimatedIronBias
                "\"DEVICE_ID\" INTEGER);"); // 12: deviceId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_magnetic_field_sensor__id ON magnetic_field_sensor" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_magnetic_field_sensor_DEVICE_ID ON magnetic_field_sensor" +
                " (\"DEVICE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"magnetic_field_sensor\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbMagneticFieldSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double x = entity.getX();
        if (x != null) {
            stmt.bindDouble(2, x);
        }
 
        Double y = entity.getY();
        if (y != null) {
            stmt.bindDouble(3, y);
        }
 
        Double z = entity.getZ();
        if (z != null) {
            stmt.bindDouble(4, z);
        }
        stmt.bindString(5, entity.getCreated());
 
        Integer accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindLong(6, accuracy);
        }
 
        Float xUncalibratedNoHardIron = entity.getXUncalibratedNoHardIron();
        if (xUncalibratedNoHardIron != null) {
            stmt.bindDouble(7, xUncalibratedNoHardIron);
        }
 
        Float yUncalibratedNoHardIron = entity.getYUncalibratedNoHardIron();
        if (yUncalibratedNoHardIron != null) {
            stmt.bindDouble(8, yUncalibratedNoHardIron);
        }
 
        Float zUncalibratedNoHardIron = entity.getZUncalibratedNoHardIron();
        if (zUncalibratedNoHardIron != null) {
            stmt.bindDouble(9, zUncalibratedNoHardIron);
        }
 
        Float xUncalibratedEstimatedIronBias = entity.getXUncalibratedEstimatedIronBias();
        if (xUncalibratedEstimatedIronBias != null) {
            stmt.bindDouble(10, xUncalibratedEstimatedIronBias);
        }
 
        Float yUncalibratedEstimatedIronBias = entity.getYUncalibratedEstimatedIronBias();
        if (yUncalibratedEstimatedIronBias != null) {
            stmt.bindDouble(11, yUncalibratedEstimatedIronBias);
        }
 
        Float zUncalibratedEstimatedIronBias = entity.getZUncalibratedEstimatedIronBias();
        if (zUncalibratedEstimatedIronBias != null) {
            stmt.bindDouble(12, zUncalibratedEstimatedIronBias);
        }
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(13, deviceId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbMagneticFieldSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double x = entity.getX();
        if (x != null) {
            stmt.bindDouble(2, x);
        }
 
        Double y = entity.getY();
        if (y != null) {
            stmt.bindDouble(3, y);
        }
 
        Double z = entity.getZ();
        if (z != null) {
            stmt.bindDouble(4, z);
        }
        stmt.bindString(5, entity.getCreated());
 
        Integer accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindLong(6, accuracy);
        }
 
        Float xUncalibratedNoHardIron = entity.getXUncalibratedNoHardIron();
        if (xUncalibratedNoHardIron != null) {
            stmt.bindDouble(7, xUncalibratedNoHardIron);
        }
 
        Float yUncalibratedNoHardIron = entity.getYUncalibratedNoHardIron();
        if (yUncalibratedNoHardIron != null) {
            stmt.bindDouble(8, yUncalibratedNoHardIron);
        }
 
        Float zUncalibratedNoHardIron = entity.getZUncalibratedNoHardIron();
        if (zUncalibratedNoHardIron != null) {
            stmt.bindDouble(9, zUncalibratedNoHardIron);
        }
 
        Float xUncalibratedEstimatedIronBias = entity.getXUncalibratedEstimatedIronBias();
        if (xUncalibratedEstimatedIronBias != null) {
            stmt.bindDouble(10, xUncalibratedEstimatedIronBias);
        }
 
        Float yUncalibratedEstimatedIronBias = entity.getYUncalibratedEstimatedIronBias();
        if (yUncalibratedEstimatedIronBias != null) {
            stmt.bindDouble(11, yUncalibratedEstimatedIronBias);
        }
 
        Float zUncalibratedEstimatedIronBias = entity.getZUncalibratedEstimatedIronBias();
        if (zUncalibratedEstimatedIronBias != null) {
            stmt.bindDouble(12, zUncalibratedEstimatedIronBias);
        }
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(13, deviceId);
        }
    }

    @Override
    protected final void attachEntity(DbMagneticFieldSensor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbMagneticFieldSensor readEntity(Cursor cursor, int offset) {
        DbMagneticFieldSensor entity = new DbMagneticFieldSensor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // x
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // y
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // z
            cursor.getString(offset + 4), // created
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // accuracy
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // xUncalibratedNoHardIron
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // yUncalibratedNoHardIron
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // zUncalibratedNoHardIron
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // xUncalibratedEstimatedIronBias
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // yUncalibratedEstimatedIronBias
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // zUncalibratedEstimatedIronBias
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // deviceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbMagneticFieldSensor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setX(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setY(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setZ(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCreated(cursor.getString(offset + 4));
        entity.setAccuracy(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setXUncalibratedNoHardIron(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setYUncalibratedNoHardIron(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setZUncalibratedNoHardIron(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setXUncalibratedEstimatedIronBias(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setYUncalibratedEstimatedIronBias(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setZUncalibratedEstimatedIronBias(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setDeviceId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbMagneticFieldSensor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbMagneticFieldSensor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbMagneticFieldSensor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbDeviceDao().getAllColumns());
            builder.append(" FROM magnetic_field_sensor T");
            builder.append(" LEFT JOIN device T0 ON T.\"DEVICE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbMagneticFieldSensor loadCurrentDeep(Cursor cursor, boolean lock) {
        DbMagneticFieldSensor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbDevice dbDevice = loadCurrentOther(daoSession.getDbDeviceDao(), cursor, offset);
        entity.setDbDevice(dbDevice);

        return entity;    
    }

    public DbMagneticFieldSensor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            }
            if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbMagneticFieldSensor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbMagneticFieldSensor> list = new ArrayList<>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbMagneticFieldSensor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbMagneticFieldSensor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

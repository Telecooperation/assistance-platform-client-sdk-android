package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "module".
 */
@Entity(active = true, nameInDb = "module")
public class DbModule {

    @Id(autoincrement = true)
    @Index
    private Long id;

    @NotNull
    @Unique
    private String packageName;
    private String title;
    private String logoUrl;
    private String descriptionShort;
    private String descriptionFull;
    private String copyright;
    private String supportEmail;

    @Index
    private boolean active;

    @NotNull
    private String created;

    @Index
    private Long userId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DbModuleDao myDao;

    @ToOne(joinProperty = "userId")
    private DbUser dbUser;

    @Generated
    private transient Long dbUser__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "moduleId")
    })
    private List<DbModuleCapability> dbModuleCapabilityList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "moduleId")
    })
    private List<DbNews> dbNewsList;

    @Generated
    public DbModule() {
    }

    public DbModule(Long id) {
        this.id = id;
    }

    @Generated
    public DbModule(Long id, String packageName, String title, String logoUrl, String descriptionShort, String descriptionFull, String copyright, String supportEmail, boolean active, String created, Long userId) {
        this.id = id;
        this.packageName = packageName;
        this.title = title;
        this.logoUrl = logoUrl;
        this.descriptionShort = descriptionShort;
        this.descriptionFull = descriptionFull;
        this.copyright = copyright;
        this.supportEmail = supportEmail;
        this.active = active;
        this.created = created;
        this.userId = userId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbModuleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getPackageName() {
        return packageName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPackageName(@NotNull String packageName) {
        this.packageName = packageName;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getLogoUrl() {
        return logoUrl;
    }

    public void setLogoUrl(String logoUrl) {
        this.logoUrl = logoUrl;
    }

    public String getDescriptionShort() {
        return descriptionShort;
    }

    public void setDescriptionShort(String descriptionShort) {
        this.descriptionShort = descriptionShort;
    }

    public String getDescriptionFull() {
        return descriptionFull;
    }

    public void setDescriptionFull(String descriptionFull) {
        this.descriptionFull = descriptionFull;
    }

    public String getCopyright() {
        return copyright;
    }

    public void setCopyright(String copyright) {
        this.copyright = copyright;
    }

    public String getSupportEmail() {
        return supportEmail;
    }

    public void setSupportEmail(String supportEmail) {
        this.supportEmail = supportEmail;
    }

    public boolean getActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    @NotNull
    public String getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(@NotNull String created) {
        this.created = created;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public DbUser getDbUser() {
        Long __key = this.userId;
        if (dbUser__resolvedKey == null || !dbUser__resolvedKey.equals(__key)) {
            __throwIfDetached();
            DbUserDao targetDao = daoSession.getDbUserDao();
            DbUser dbUserNew = targetDao.load(__key);
            synchronized (this) {
                dbUser = dbUserNew;
            	dbUser__resolvedKey = __key;
            }
        }
        return dbUser;
    }

    @Generated
    public void setDbUser(DbUser dbUser) {
        synchronized (this) {
            this.dbUser = dbUser;
            userId = dbUser == null ? null : dbUser.getId();
            dbUser__resolvedKey = userId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DbModuleCapability> getDbModuleCapabilityList() {
        if (dbModuleCapabilityList == null) {
            __throwIfDetached();
            DbModuleCapabilityDao targetDao = daoSession.getDbModuleCapabilityDao();
            List<DbModuleCapability> dbModuleCapabilityListNew = targetDao._queryDbModule_DbModuleCapabilityList(id);
            synchronized (this) {
                if(dbModuleCapabilityList == null) {
                    dbModuleCapabilityList = dbModuleCapabilityListNew;
                }
            }
        }
        return dbModuleCapabilityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDbModuleCapabilityList() {
        dbModuleCapabilityList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DbNews> getDbNewsList() {
        if (dbNewsList == null) {
            __throwIfDetached();
            DbNewsDao targetDao = daoSession.getDbNewsDao();
            List<DbNews> dbNewsListNew = targetDao._queryDbModule_DbNewsList(id);
            synchronized (this) {
                if(dbNewsList == null) {
                    dbNewsList = dbNewsListNew;
                }
            }
        }
        return dbNewsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDbNewsList() {
        dbNewsList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}

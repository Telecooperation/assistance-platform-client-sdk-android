package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "module_capability".
*/
public class DbModuleCapabilityDao extends AbstractDao<DbModuleCapability, Long> {

    public static final String TABLENAME = "module_capability";

    /**
     * Properties of entity DbModuleCapability.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property CollectionInterval = new Property(2, Double.class, "collectionInterval", false, "COLLECTION_INTERVAL");
        public final static Property UpdateInterval = new Property(3, Double.class, "updateInterval", false, "UPDATE_INTERVAL");
        public final static Property Accuracy = new Property(4, Integer.class, "accuracy", false, "ACCURACY");
        public final static Property Permissions = new Property(5, String.class, "permissions", false, "PERMISSIONS");
        public final static Property Required = new Property(6, boolean.class, "required", false, "REQUIRED");
        public final static Property Active = new Property(7, boolean.class, "active", false, "ACTIVE");
        public final static Property Created = new Property(8, String.class, "created", false, "CREATED");
        public final static Property ModuleId = new Property(9, Long.class, "moduleId", false, "MODULE_ID");
    }

    private DaoSession daoSession;

    private Query<DbModuleCapability> dbModule_DbModuleCapabilityListQuery;

    public DbModuleCapabilityDao(DaoConfig config) {
        super(config);
    }
    
    public DbModuleCapabilityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"module_capability\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT NOT NULL ," + // 1: type
                "\"COLLECTION_INTERVAL\" REAL," + // 2: collectionInterval
                "\"UPDATE_INTERVAL\" REAL," + // 3: updateInterval
                "\"ACCURACY\" INTEGER," + // 4: accuracy
                "\"PERMISSIONS\" TEXT," + // 5: permissions
                "\"REQUIRED\" INTEGER NOT NULL ," + // 6: required
                "\"ACTIVE\" INTEGER NOT NULL ," + // 7: active
                "\"CREATED\" TEXT NOT NULL ," + // 8: created
                "\"MODULE_ID\" INTEGER);"); // 9: moduleId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_capability__id ON module_capability" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_capability_TYPE ON module_capability" +
                " (\"TYPE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_capability_ACTIVE ON module_capability" +
                " (\"ACTIVE\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_capability_MODULE_ID ON module_capability" +
                " (\"MODULE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"module_capability\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbModuleCapability entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
 
        Double collectionInterval = entity.getCollectionInterval();
        if (collectionInterval != null) {
            stmt.bindDouble(3, collectionInterval);
        }
 
        Double updateInterval = entity.getUpdateInterval();
        if (updateInterval != null) {
            stmt.bindDouble(4, updateInterval);
        }
 
        Integer accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindLong(5, accuracy);
        }
 
        String permissions = entity.getPermissions();
        if (permissions != null) {
            stmt.bindString(6, permissions);
        }
        stmt.bindLong(7, entity.getRequired() ? 1L: 0L);
        stmt.bindLong(8, entity.getActive() ? 1L: 0L);
        stmt.bindString(9, entity.getCreated());
 
        Long moduleId = entity.getModuleId();
        if (moduleId != null) {
            stmt.bindLong(10, moduleId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbModuleCapability entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
 
        Double collectionInterval = entity.getCollectionInterval();
        if (collectionInterval != null) {
            stmt.bindDouble(3, collectionInterval);
        }
 
        Double updateInterval = entity.getUpdateInterval();
        if (updateInterval != null) {
            stmt.bindDouble(4, updateInterval);
        }
 
        Integer accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindLong(5, accuracy);
        }
 
        String permissions = entity.getPermissions();
        if (permissions != null) {
            stmt.bindString(6, permissions);
        }
        stmt.bindLong(7, entity.getRequired() ? 1L: 0L);
        stmt.bindLong(8, entity.getActive() ? 1L: 0L);
        stmt.bindString(9, entity.getCreated());
 
        Long moduleId = entity.getModuleId();
        if (moduleId != null) {
            stmt.bindLong(10, moduleId);
        }
    }

    @Override
    protected final void attachEntity(DbModuleCapability entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbModuleCapability readEntity(Cursor cursor, int offset) {
        DbModuleCapability entity = new DbModuleCapability( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // collectionInterval
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // updateInterval
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // accuracy
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // permissions
            cursor.getShort(offset + 6) != 0, // required
            cursor.getShort(offset + 7) != 0, // active
            cursor.getString(offset + 8), // created
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // moduleId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbModuleCapability entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setCollectionInterval(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setUpdateInterval(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setAccuracy(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPermissions(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRequired(cursor.getShort(offset + 6) != 0);
        entity.setActive(cursor.getShort(offset + 7) != 0);
        entity.setCreated(cursor.getString(offset + 8));
        entity.setModuleId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbModuleCapability entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbModuleCapability entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbModuleCapability entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dbModuleCapabilityList" to-many relationship of DbModule. */
    public List<DbModuleCapability> _queryDbModule_DbModuleCapabilityList(Long moduleId) {
        synchronized (this) {
            if (dbModule_DbModuleCapabilityListQuery == null) {
                QueryBuilder<DbModuleCapability> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ModuleId.eq(null));
                dbModule_DbModuleCapabilityListQuery = queryBuilder.build();
            }
        }
        Query<DbModuleCapability> query = dbModule_DbModuleCapabilityListQuery.forCurrentThread();
        query.setParameter(0, moduleId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbModuleDao().getAllColumns());
            builder.append(" FROM module_capability T");
            builder.append(" LEFT JOIN module T0 ON T.\"MODULE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbModuleCapability loadCurrentDeep(Cursor cursor, boolean lock) {
        DbModuleCapability entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbModule dbModule = loadCurrentOther(daoSession.getDbModuleDao(), cursor, offset);
        entity.setDbModule(dbModule);

        return entity;    
    }

    public DbModuleCapability loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbModuleCapability> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbModuleCapability> list = new ArrayList<DbModuleCapability>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbModuleCapability> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbModuleCapability> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table "user".
 */
@Entity(active = true, nameInDb = "user")
public class DbUser {

    @Id(autoincrement = true)
    @Index
    private Long id;

    @NotNull
    @Index
    private String token;
    private String firstname;
    private String lastname;

    @NotNull
    @Index
    private String primaryEmail;
    private String userpicFilename;
    private String lastLogin;
    private String joinedSince;
    private String uuid;

    @NotNull
    private String created;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DbUserDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "userId")
    })
    private List<DbUserSocialProfile> dbUserSocialProfileList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "userId")
    })
    private List<DbDevice> dbDeviceList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "userId")
    })
    private List<DbModule> dbModuleList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "userId")
    })
    private List<DbNews> dbNewsList;

    @Generated
    public DbUser() {
    }

    public DbUser(Long id) {
        this.id = id;
    }

    @Generated
    public DbUser(Long id, String token, String firstname, String lastname, String primaryEmail, String userpicFilename, String lastLogin, String joinedSince, String uuid, String created) {
        this.id = id;
        this.token = token;
        this.firstname = firstname;
        this.lastname = lastname;
        this.primaryEmail = primaryEmail;
        this.userpicFilename = userpicFilename;
        this.lastLogin = lastLogin;
        this.joinedSince = joinedSince;
        this.uuid = uuid;
        this.created = created;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getToken() {
        return token;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setToken(@NotNull String token) {
        this.token = token;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    @NotNull
    public String getPrimaryEmail() {
        return primaryEmail;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrimaryEmail(@NotNull String primaryEmail) {
        this.primaryEmail = primaryEmail;
    }

    public String getUserpicFilename() {
        return userpicFilename;
    }

    public void setUserpicFilename(String userpicFilename) {
        this.userpicFilename = userpicFilename;
    }

    public String getLastLogin() {
        return lastLogin;
    }

    public void setLastLogin(String lastLogin) {
        this.lastLogin = lastLogin;
    }

    public String getJoinedSince() {
        return joinedSince;
    }

    public void setJoinedSince(String joinedSince) {
        this.joinedSince = joinedSince;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    @NotNull
    public String getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(@NotNull String created) {
        this.created = created;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DbUserSocialProfile> getDbUserSocialProfileList() {
        if (dbUserSocialProfileList == null) {
            __throwIfDetached();
            DbUserSocialProfileDao targetDao = daoSession.getDbUserSocialProfileDao();
            List<DbUserSocialProfile> dbUserSocialProfileListNew = targetDao._queryDbUser_DbUserSocialProfileList(id);
            synchronized (this) {
                if(dbUserSocialProfileList == null) {
                    dbUserSocialProfileList = dbUserSocialProfileListNew;
                }
            }
        }
        return dbUserSocialProfileList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDbUserSocialProfileList() {
        dbUserSocialProfileList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DbDevice> getDbDeviceList() {
        if (dbDeviceList == null) {
            __throwIfDetached();
            DbDeviceDao targetDao = daoSession.getDbDeviceDao();
            List<DbDevice> dbDeviceListNew = targetDao._queryDbUser_DbDeviceList(id);
            synchronized (this) {
                if(dbDeviceList == null) {
                    dbDeviceList = dbDeviceListNew;
                }
            }
        }
        return dbDeviceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDbDeviceList() {
        dbDeviceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DbModule> getDbModuleList() {
        if (dbModuleList == null) {
            __throwIfDetached();
            DbModuleDao targetDao = daoSession.getDbModuleDao();
            List<DbModule> dbModuleListNew = targetDao._queryDbUser_DbModuleList(id);
            synchronized (this) {
                if(dbModuleList == null) {
                    dbModuleList = dbModuleListNew;
                }
            }
        }
        return dbModuleList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDbModuleList() {
        dbModuleList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<DbNews> getDbNewsList() {
        if (dbNewsList == null) {
            __throwIfDetached();
            DbNewsDao targetDao = daoSession.getDbNewsDao();
            List<DbNews> dbNewsListNew = targetDao._queryDbUser_DbNewsList(id);
            synchronized (this) {
                if(dbNewsList == null) {
                    dbNewsList = dbNewsListNew;
                }
            }
        }
        return dbNewsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDbNewsList() {
        dbNewsList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}

package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "wifi_connection_sensor".
*/
public class DbWifiConnectionSensorDao extends AbstractDao<DbWifiConnectionSensor, Long> {

    public static final String TABLENAME = "wifi_connection_sensor";

    /**
     * Properties of entity DbWifiConnectionSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ssid = new Property(1, String.class, "ssid", false, "SSID");
        public final static Property Bssid = new Property(2, String.class, "bssid", false, "BSSID");
        public final static Property Created = new Property(3, String.class, "created", false, "CREATED");
        public final static Property Channel = new Property(4, Integer.class, "channel", false, "CHANNEL");
        public final static Property Frequency = new Property(5, Integer.class, "frequency", false, "FREQUENCY");
        public final static Property LinkSpeed = new Property(6, Integer.class, "linkSpeed", false, "LINK_SPEED");
        public final static Property SignalStrength = new Property(7, Integer.class, "signalStrength", false, "SIGNAL_STRENGTH");
        public final static Property NetworkId = new Property(8, Integer.class, "networkId", false, "NETWORK_ID");
        public final static Property DeviceId = new Property(9, Long.class, "deviceId", false, "DEVICE_ID");
    }

    private DaoSession daoSession;


    public DbWifiConnectionSensorDao(DaoConfig config) {
        super(config);
    }
    
    public DbWifiConnectionSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"wifi_connection_sensor\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SSID\" TEXT," + // 1: ssid
                "\"BSSID\" TEXT," + // 2: bssid
                "\"CREATED\" TEXT NOT NULL ," + // 3: created
                "\"CHANNEL\" INTEGER," + // 4: channel
                "\"FREQUENCY\" INTEGER," + // 5: frequency
                "\"LINK_SPEED\" INTEGER," + // 6: linkSpeed
                "\"SIGNAL_STRENGTH\" INTEGER," + // 7: signalStrength
                "\"NETWORK_ID\" INTEGER," + // 8: networkId
                "\"DEVICE_ID\" INTEGER);"); // 9: deviceId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_wifi_connection_sensor__id ON wifi_connection_sensor" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_wifi_connection_sensor_DEVICE_ID ON wifi_connection_sensor" +
                " (\"DEVICE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"wifi_connection_sensor\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbWifiConnectionSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ssid = entity.getSsid();
        if (ssid != null) {
            stmt.bindString(2, ssid);
        }
 
        String bssid = entity.getBssid();
        if (bssid != null) {
            stmt.bindString(3, bssid);
        }
        stmt.bindString(4, entity.getCreated());
 
        Integer channel = entity.getChannel();
        if (channel != null) {
            stmt.bindLong(5, channel);
        }
 
        Integer frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindLong(6, frequency);
        }
 
        Integer linkSpeed = entity.getLinkSpeed();
        if (linkSpeed != null) {
            stmt.bindLong(7, linkSpeed);
        }
 
        Integer signalStrength = entity.getSignalStrength();
        if (signalStrength != null) {
            stmt.bindLong(8, signalStrength);
        }
 
        Integer networkId = entity.getNetworkId();
        if (networkId != null) {
            stmt.bindLong(9, networkId);
        }
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(10, deviceId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbWifiConnectionSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ssid = entity.getSsid();
        if (ssid != null) {
            stmt.bindString(2, ssid);
        }
 
        String bssid = entity.getBssid();
        if (bssid != null) {
            stmt.bindString(3, bssid);
        }
        stmt.bindString(4, entity.getCreated());
 
        Integer channel = entity.getChannel();
        if (channel != null) {
            stmt.bindLong(5, channel);
        }
 
        Integer frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindLong(6, frequency);
        }
 
        Integer linkSpeed = entity.getLinkSpeed();
        if (linkSpeed != null) {
            stmt.bindLong(7, linkSpeed);
        }
 
        Integer signalStrength = entity.getSignalStrength();
        if (signalStrength != null) {
            stmt.bindLong(8, signalStrength);
        }
 
        Integer networkId = entity.getNetworkId();
        if (networkId != null) {
            stmt.bindLong(9, networkId);
        }
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(10, deviceId);
        }
    }

    @Override
    protected final void attachEntity(DbWifiConnectionSensor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbWifiConnectionSensor readEntity(Cursor cursor, int offset) {
        DbWifiConnectionSensor entity = new DbWifiConnectionSensor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ssid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bssid
            cursor.getString(offset + 3), // created
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // channel
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // frequency
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // linkSpeed
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // signalStrength
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // networkId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // deviceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbWifiConnectionSensor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSsid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBssid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated(cursor.getString(offset + 3));
        entity.setChannel(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFrequency(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLinkSpeed(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSignalStrength(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNetworkId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDeviceId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbWifiConnectionSensor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbWifiConnectionSensor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbWifiConnectionSensor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbDeviceDao().getAllColumns());
            builder.append(" FROM wifi_connection_sensor T");
            builder.append(" LEFT JOIN device T0 ON T.\"DEVICE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbWifiConnectionSensor loadCurrentDeep(Cursor cursor, boolean lock) {
        DbWifiConnectionSensor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbDevice dbDevice = loadCurrentOther(daoSession.getDbDeviceDao(), cursor, offset);
        entity.setDbDevice(dbDevice);

        return entity;    
    }

    public DbWifiConnectionSensor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbWifiConnectionSensor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbWifiConnectionSensor> list = new ArrayList<DbWifiConnectionSensor>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbWifiConnectionSensor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbWifiConnectionSensor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

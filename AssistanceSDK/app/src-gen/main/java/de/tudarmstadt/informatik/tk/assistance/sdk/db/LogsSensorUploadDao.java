package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "logs_sensor_upload".
*/
public class LogsSensorUploadDao extends AbstractDao<LogsSensorUpload, Long> {

    public static final String TABLENAME = "logs_sensor_upload";

    /**
     * Properties of entity LogsSensorUpload.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public static final Property Id = new Property(0, Long.class, "id", true, "_id");
        public static final Property StartTime = new Property(1, Long.class, "startTime", false, "START_TIME");
        public static final Property ProcessingTime = new Property(2, Long.class, "processingTime", false, "PROCESSING_TIME");
        public static final Property ResponseTime = new Property(3, Long.class, "responseTime", false, "RESPONSE_TIME");
        public static final Property NetworkType = new Property(4, String.class, "networkType", false, "NETWORK_TYPE");
        public static final Property EventsNumber = new Property(5, Integer.class, "eventsNumber", false, "EVENTS_NUMBER");
        public static final Property BodySize = new Property(6, Long.class, "bodySize", false, "BODY_SIZE");
        public static final Property UserId = new Property(7, Long.class, "userId", false, "USER_ID");
    }

    private DaoSession daoSession;


    public LogsSensorUploadDao(DaoConfig config) {
        super(config);
    }
    
    public LogsSensorUploadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"logs_sensor_upload\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"START_TIME\" INTEGER," + // 1: startTime
                "\"PROCESSING_TIME\" INTEGER," + // 2: processingTime
                "\"RESPONSE_TIME\" INTEGER," + // 3: responseTime
                "\"NETWORK_TYPE\" TEXT," + // 4: networkType
                "\"EVENTS_NUMBER\" INTEGER," + // 5: eventsNumber
                "\"BODY_SIZE\" INTEGER," + // 6: bodySize
                "\"USER_ID\" INTEGER);"); // 7: userId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_logs_sensor_upload__id ON logs_sensor_upload" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_logs_sensor_upload_USER_ID ON logs_sensor_upload" +
                " (\"USER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"logs_sensor_upload\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogsSensorUpload entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime);
        }
 
        Long processingTime = entity.getProcessingTime();
        if (processingTime != null) {
            stmt.bindLong(3, processingTime);
        }
 
        Long responseTime = entity.getResponseTime();
        if (responseTime != null) {
            stmt.bindLong(4, responseTime);
        }
 
        String networkType = entity.getNetworkType();
        if (networkType != null) {
            stmt.bindString(5, networkType);
        }
 
        Integer eventsNumber = entity.getEventsNumber();
        if (eventsNumber != null) {
            stmt.bindLong(6, eventsNumber);
        }
 
        Long bodySize = entity.getBodySize();
        if (bodySize != null) {
            stmt.bindLong(7, bodySize);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(8, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogsSensorUpload entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime);
        }
 
        Long processingTime = entity.getProcessingTime();
        if (processingTime != null) {
            stmt.bindLong(3, processingTime);
        }
 
        Long responseTime = entity.getResponseTime();
        if (responseTime != null) {
            stmt.bindLong(4, responseTime);
        }
 
        String networkType = entity.getNetworkType();
        if (networkType != null) {
            stmt.bindString(5, networkType);
        }
 
        Integer eventsNumber = entity.getEventsNumber();
        if (eventsNumber != null) {
            stmt.bindLong(6, eventsNumber);
        }
 
        Long bodySize = entity.getBodySize();
        if (bodySize != null) {
            stmt.bindLong(7, bodySize);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(8, userId);
        }
    }

    @Override
    protected final void attachEntity(LogsSensorUpload entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LogsSensorUpload readEntity(Cursor cursor, int offset) {
        LogsSensorUpload entity = new LogsSensorUpload( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // startTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // processingTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // responseTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // networkType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // eventsNumber
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // bodySize
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogsSensorUpload entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProcessingTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setResponseTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setNetworkType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEventsNumber(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBodySize(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LogsSensorUpload entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LogsSensorUpload entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LogsSensorUpload entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbUserDao().getAllColumns());
            builder.append(" FROM logs_sensor_upload T");
            builder.append(" LEFT JOIN user T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LogsSensorUpload loadCurrentDeep(Cursor cursor, boolean lock) {
        LogsSensorUpload entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbUser dbUser = loadCurrentOther(daoSession.getDbUserDao(), cursor, offset);
        entity.setDbUser(dbUser);

        return entity;    
    }

    public LogsSensorUpload loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            }
            if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LogsSensorUpload> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LogsSensorUpload> list = new ArrayList<>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LogsSensorUpload> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LogsSensorUpload> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

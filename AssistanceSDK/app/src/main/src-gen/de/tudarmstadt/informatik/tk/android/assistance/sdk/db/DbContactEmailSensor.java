package de.tudarmstadt.informatik.tk.android.assistance.sdk.db;

import de.tudarmstadt.informatik.tk.android.assistance.sdk.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "contact_email_sensor".
 */
public class DbContactEmailSensor implements de.tudarmstadt.informatik.tk.android.assistance.sdk.interfaces.IDbUpdatableSensor {

    private Long id;
    private Long mailId;
    private String address;
    private String type;
    private Boolean isNew;
    private Boolean isUpdated;
    private Boolean isDeleted;
    /** Not-null value. */
    private String created;
    private Long contactId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbContactEmailSensorDao myDao;

    private DbContactSensor dbContactSensor;
    private Long dbContactSensor__resolvedKey;


    public DbContactEmailSensor() {
    }

    public DbContactEmailSensor(Long id) {
        this.id = id;
    }

    public DbContactEmailSensor(Long id, Long mailId, String address, String type, Boolean isNew, Boolean isUpdated, Boolean isDeleted, String created, Long contactId) {
        this.id = id;
        this.mailId = mailId;
        this.address = address;
        this.type = type;
        this.isNew = isNew;
        this.isUpdated = isUpdated;
        this.isDeleted = isDeleted;
        this.created = created;
        this.contactId = contactId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbContactEmailSensorDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getMailId() {
        return mailId;
    }

    public void setMailId(Long mailId) {
        this.mailId = mailId;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Boolean getIsNew() {
        return isNew;
    }

    public void setIsNew(Boolean isNew) {
        this.isNew = isNew;
    }

    public Boolean getIsUpdated() {
        return isUpdated;
    }

    public void setIsUpdated(Boolean isUpdated) {
        this.isUpdated = isUpdated;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    /** Not-null value. */
    public String getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(String created) {
        this.created = created;
    }

    public Long getContactId() {
        return contactId;
    }

    public void setContactId(Long contactId) {
        this.contactId = contactId;
    }

    /** To-one relationship, resolved on first access. */
    public DbContactSensor getDbContactSensor() {
        Long __key = this.contactId;
        if (dbContactSensor__resolvedKey == null || !dbContactSensor__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbContactSensorDao targetDao = daoSession.getDbContactSensorDao();
            DbContactSensor dbContactSensorNew = targetDao.load(__key);
            synchronized (this) {
                dbContactSensor = dbContactSensorNew;
            	dbContactSensor__resolvedKey = __key;
            }
        }
        return dbContactSensor;
    }

    public void setDbContactSensor(DbContactSensor dbContactSensor) {
        synchronized (this) {
            this.dbContactSensor = dbContactSensor;
            contactId = dbContactSensor == null ? null : dbContactSensor.getId();
            dbContactSensor__resolvedKey = contactId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

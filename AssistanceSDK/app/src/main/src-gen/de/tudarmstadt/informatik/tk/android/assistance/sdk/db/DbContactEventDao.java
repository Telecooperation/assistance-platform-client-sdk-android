package de.tudarmstadt.informatik.tk.android.assistance.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.android.assistance.sdk.db.DbContactEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "contact_event".
*/
public class DbContactEventDao extends AbstractDao<DbContactEvent, Long> {

    public static final String TABLENAME = "contact_event";

    /**
     * Properties of entity DbContactEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GlobalContactId = new Property(1, Long.class, "globalContactId", false, "GLOBAL_CONTACT_ID");
        public final static Property DisplayName = new Property(2, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property GivenName = new Property(3, String.class, "givenName", false, "GIVEN_NAME");
        public final static Property FamilyName = new Property(4, String.class, "familyName", false, "FAMILY_NAME");
        public final static Property Starred = new Property(5, Integer.class, "starred", false, "STARRED");
        public final static Property LastTimeContacted = new Property(6, Integer.class, "lastTimeContacted", false, "LAST_TIME_CONTACTED");
        public final static Property TimesContacted = new Property(7, Integer.class, "timesContacted", false, "TIMES_CONTACTED");
        public final static Property Note = new Property(8, String.class, "note", false, "NOTE");
        public final static Property IsNew = new Property(9, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property IsUpdated = new Property(10, Boolean.class, "isUpdated", false, "IS_UPDATED");
        public final static Property IsDeleted = new Property(11, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Created = new Property(12, String.class, "created", false, "CREATED");
    };

    private DaoSession daoSession;


    public DbContactEventDao(DaoConfig config) {
        super(config);
    }
    
    public DbContactEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"contact_event\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GLOBAL_CONTACT_ID\" INTEGER," + // 1: globalContactId
                "\"DISPLAY_NAME\" TEXT," + // 2: displayName
                "\"GIVEN_NAME\" TEXT," + // 3: givenName
                "\"FAMILY_NAME\" TEXT," + // 4: familyName
                "\"STARRED\" INTEGER," + // 5: starred
                "\"LAST_TIME_CONTACTED\" INTEGER," + // 6: lastTimeContacted
                "\"TIMES_CONTACTED\" INTEGER," + // 7: timesContacted
                "\"NOTE\" TEXT," + // 8: note
                "\"IS_NEW\" INTEGER," + // 9: isNew
                "\"IS_UPDATED\" INTEGER," + // 10: isUpdated
                "\"IS_DELETED\" INTEGER," + // 11: isDeleted
                "\"CREATED\" TEXT NOT NULL );"); // 12: created
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_contact_event__id ON contact_event" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"contact_event\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbContactEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long globalContactId = entity.getGlobalContactId();
        if (globalContactId != null) {
            stmt.bindLong(2, globalContactId);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(3, displayName);
        }
 
        String givenName = entity.getGivenName();
        if (givenName != null) {
            stmt.bindString(4, givenName);
        }
 
        String familyName = entity.getFamilyName();
        if (familyName != null) {
            stmt.bindString(5, familyName);
        }
 
        Integer starred = entity.getStarred();
        if (starred != null) {
            stmt.bindLong(6, starred);
        }
 
        Integer lastTimeContacted = entity.getLastTimeContacted();
        if (lastTimeContacted != null) {
            stmt.bindLong(7, lastTimeContacted);
        }
 
        Integer timesContacted = entity.getTimesContacted();
        if (timesContacted != null) {
            stmt.bindLong(8, timesContacted);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(10, isNew ? 1L: 0L);
        }
 
        Boolean isUpdated = entity.getIsUpdated();
        if (isUpdated != null) {
            stmt.bindLong(11, isUpdated ? 1L: 0L);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(12, isDeleted ? 1L: 0L);
        }
        stmt.bindString(13, entity.getCreated());
    }

    @Override
    protected void attachEntity(DbContactEvent entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbContactEvent readEntity(Cursor cursor, int offset) {
        DbContactEvent entity = new DbContactEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // globalContactId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // displayName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // givenName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // familyName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // starred
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // lastTimeContacted
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // timesContacted
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // note
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isNew
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isUpdated
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isDeleted
            cursor.getString(offset + 12) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbContactEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGlobalContactId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDisplayName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGivenName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFamilyName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStarred(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLastTimeContacted(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTimesContacted(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNote(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsNew(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsUpdated(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsDeleted(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setCreated(cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbContactEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbContactEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package de.tudarmstadt.informatik.tk.android.assistance.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.android.assistance.sdk.db.DbGyroscopeSensor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "gyroscope_sensor".
*/
public class DbGyroscopeSensorDao extends AbstractDao<DbGyroscopeSensor, Long> {

    public static final String TABLENAME = "gyroscope_sensor";

    /**
     * Properties of entity DbGyroscopeSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property X = new Property(1, Double.class, "x", false, "X");
        public final static Property Y = new Property(2, Double.class, "y", false, "Y");
        public final static Property Z = new Property(3, Double.class, "z", false, "Z");
        public final static Property Created = new Property(4, String.class, "created", false, "CREATED");
        public final static Property Accuracy = new Property(5, Integer.class, "accuracy", false, "ACCURACY");
        public final static Property XUncalibratedNoDrift = new Property(6, Float.class, "xUncalibratedNoDrift", false, "X_UNCALIBRATED_NO_DRIFT");
        public final static Property YUncalibratedNoDrift = new Property(7, Float.class, "yUncalibratedNoDrift", false, "Y_UNCALIBRATED_NO_DRIFT");
        public final static Property ZUncalibratedNoDrift = new Property(8, Float.class, "zUncalibratedNoDrift", false, "Z_UNCALIBRATED_NO_DRIFT");
        public final static Property XUncalibratedEstimatedDrift = new Property(9, Float.class, "xUncalibratedEstimatedDrift", false, "X_UNCALIBRATED_ESTIMATED_DRIFT");
        public final static Property YUncalibratedEstimatedDrift = new Property(10, Float.class, "yUncalibratedEstimatedDrift", false, "Y_UNCALIBRATED_ESTIMATED_DRIFT");
        public final static Property ZUncalibratedEstimatedDrift = new Property(11, Float.class, "zUncalibratedEstimatedDrift", false, "Z_UNCALIBRATED_ESTIMATED_DRIFT");
    };


    public DbGyroscopeSensorDao(DaoConfig config) {
        super(config);
    }
    
    public DbGyroscopeSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"gyroscope_sensor\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"X\" REAL," + // 1: x
                "\"Y\" REAL," + // 2: y
                "\"Z\" REAL," + // 3: z
                "\"CREATED\" TEXT NOT NULL ," + // 4: created
                "\"ACCURACY\" INTEGER," + // 5: accuracy
                "\"X_UNCALIBRATED_NO_DRIFT\" REAL," + // 6: xUncalibratedNoDrift
                "\"Y_UNCALIBRATED_NO_DRIFT\" REAL," + // 7: yUncalibratedNoDrift
                "\"Z_UNCALIBRATED_NO_DRIFT\" REAL," + // 8: zUncalibratedNoDrift
                "\"X_UNCALIBRATED_ESTIMATED_DRIFT\" REAL," + // 9: xUncalibratedEstimatedDrift
                "\"Y_UNCALIBRATED_ESTIMATED_DRIFT\" REAL," + // 10: yUncalibratedEstimatedDrift
                "\"Z_UNCALIBRATED_ESTIMATED_DRIFT\" REAL);"); // 11: zUncalibratedEstimatedDrift
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_gyroscope_sensor__id ON gyroscope_sensor" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"gyroscope_sensor\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbGyroscopeSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double x = entity.getX();
        if (x != null) {
            stmt.bindDouble(2, x);
        }
 
        Double y = entity.getY();
        if (y != null) {
            stmt.bindDouble(3, y);
        }
 
        Double z = entity.getZ();
        if (z != null) {
            stmt.bindDouble(4, z);
        }
        stmt.bindString(5, entity.getCreated());
 
        Integer accuracy = entity.getAccuracy();
        if (accuracy != null) {
            stmt.bindLong(6, accuracy);
        }
 
        Float xUncalibratedNoDrift = entity.getXUncalibratedNoDrift();
        if (xUncalibratedNoDrift != null) {
            stmt.bindDouble(7, xUncalibratedNoDrift);
        }
 
        Float yUncalibratedNoDrift = entity.getYUncalibratedNoDrift();
        if (yUncalibratedNoDrift != null) {
            stmt.bindDouble(8, yUncalibratedNoDrift);
        }
 
        Float zUncalibratedNoDrift = entity.getZUncalibratedNoDrift();
        if (zUncalibratedNoDrift != null) {
            stmt.bindDouble(9, zUncalibratedNoDrift);
        }
 
        Float xUncalibratedEstimatedDrift = entity.getXUncalibratedEstimatedDrift();
        if (xUncalibratedEstimatedDrift != null) {
            stmt.bindDouble(10, xUncalibratedEstimatedDrift);
        }
 
        Float yUncalibratedEstimatedDrift = entity.getYUncalibratedEstimatedDrift();
        if (yUncalibratedEstimatedDrift != null) {
            stmt.bindDouble(11, yUncalibratedEstimatedDrift);
        }
 
        Float zUncalibratedEstimatedDrift = entity.getZUncalibratedEstimatedDrift();
        if (zUncalibratedEstimatedDrift != null) {
            stmt.bindDouble(12, zUncalibratedEstimatedDrift);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbGyroscopeSensor readEntity(Cursor cursor, int offset) {
        DbGyroscopeSensor entity = new DbGyroscopeSensor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // x
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // y
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // z
            cursor.getString(offset + 4), // created
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // accuracy
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // xUncalibratedNoDrift
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // yUncalibratedNoDrift
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // zUncalibratedNoDrift
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // xUncalibratedEstimatedDrift
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // yUncalibratedEstimatedDrift
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11) // zUncalibratedEstimatedDrift
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbGyroscopeSensor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setX(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setY(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setZ(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCreated(cursor.getString(offset + 4));
        entity.setAccuracy(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setXUncalibratedNoDrift(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setYUncalibratedNoDrift(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setZUncalibratedNoDrift(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setXUncalibratedEstimatedDrift(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setYUncalibratedEstimatedDrift(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setZUncalibratedEstimatedDrift(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbGyroscopeSensor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbGyroscopeSensor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package de.tudarmstadt.informatik.tk.android.assistance.sdk.db;

import de.tudarmstadt.informatik.tk.android.assistance.sdk.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "module_capability".
 */
public class DbModuleCapability {

    private Long id;
    /** Not-null value. */
    private String type;
    private Double collectionFrequency;
    private Double requiredUpdateFrequency;
    private Integer minRequiredReadingsOnUpdate;
    private boolean required;
    /** Not-null value. */
    private String created;
    private Long moduleId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbModuleCapabilityDao myDao;

    private DbModule dbModule;
    private Long dbModule__resolvedKey;


    public DbModuleCapability() {
    }

    public DbModuleCapability(Long id) {
        this.id = id;
    }

    public DbModuleCapability(Long id, String type, Double collectionFrequency, Double requiredUpdateFrequency, Integer minRequiredReadingsOnUpdate, boolean required, String created, Long moduleId) {
        this.id = id;
        this.type = type;
        this.collectionFrequency = collectionFrequency;
        this.requiredUpdateFrequency = requiredUpdateFrequency;
        this.minRequiredReadingsOnUpdate = minRequiredReadingsOnUpdate;
        this.required = required;
        this.created = created;
        this.moduleId = moduleId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbModuleCapabilityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public Double getCollectionFrequency() {
        return collectionFrequency;
    }

    public void setCollectionFrequency(Double collectionFrequency) {
        this.collectionFrequency = collectionFrequency;
    }

    public Double getRequiredUpdateFrequency() {
        return requiredUpdateFrequency;
    }

    public void setRequiredUpdateFrequency(Double requiredUpdateFrequency) {
        this.requiredUpdateFrequency = requiredUpdateFrequency;
    }

    public Integer getMinRequiredReadingsOnUpdate() {
        return minRequiredReadingsOnUpdate;
    }

    public void setMinRequiredReadingsOnUpdate(Integer minRequiredReadingsOnUpdate) {
        this.minRequiredReadingsOnUpdate = minRequiredReadingsOnUpdate;
    }

    public boolean getRequired() {
        return required;
    }

    public void setRequired(boolean required) {
        this.required = required;
    }

    /** Not-null value. */
    public String getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(String created) {
        this.created = created;
    }

    public Long getModuleId() {
        return moduleId;
    }

    public void setModuleId(Long moduleId) {
        this.moduleId = moduleId;
    }

    /** To-one relationship, resolved on first access. */
    public DbModule getDbModule() {
        Long __key = this.moduleId;
        if (dbModule__resolvedKey == null || !dbModule__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbModuleDao targetDao = daoSession.getDbModuleDao();
            DbModule dbModuleNew = targetDao.load(__key);
            synchronized (this) {
                dbModule = dbModuleNew;
            	dbModule__resolvedKey = __key;
            }
        }
        return dbModule;
    }

    public void setDbModule(DbModule dbModule) {
        synchronized (this) {
            this.dbModule = dbModule;
            moduleId = dbModule == null ? null : dbModule.getId();
            dbModule__resolvedKey = moduleId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

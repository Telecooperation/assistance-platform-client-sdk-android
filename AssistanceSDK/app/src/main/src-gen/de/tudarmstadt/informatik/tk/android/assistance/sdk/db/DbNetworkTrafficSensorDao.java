package de.tudarmstadt.informatik.tk.android.assistance.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.android.assistance.sdk.db.DbNetworkTrafficSensor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "network_traffic_sensor".
*/
public class DbNetworkTrafficSensorDao extends AbstractDao<DbNetworkTrafficSensor, Long> {

    public static final String TABLENAME = "network_traffic_sensor";

    /**
     * Properties of entity DbNetworkTrafficSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property RxBytes = new Property(2, Long.class, "rxBytes", false, "RX_BYTES");
        public final static Property TxBytes = new Property(3, Long.class, "txBytes", false, "TX_BYTES");
        public final static Property Background = new Property(4, Boolean.class, "background", false, "BACKGROUND");
        public final static Property Longitude = new Property(5, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(6, Double.class, "latitude", false, "LATITUDE");
        public final static Property Created = new Property(7, String.class, "created", false, "CREATED");
    };


    public DbNetworkTrafficSensorDao(DaoConfig config) {
        super(config);
    }
    
    public DbNetworkTrafficSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"network_traffic_sensor\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_NAME\" TEXT," + // 1: appName
                "\"RX_BYTES\" INTEGER," + // 2: rxBytes
                "\"TX_BYTES\" INTEGER," + // 3: txBytes
                "\"BACKGROUND\" INTEGER," + // 4: background
                "\"LONGITUDE\" REAL," + // 5: longitude
                "\"LATITUDE\" REAL," + // 6: latitude
                "\"CREATED\" TEXT NOT NULL );"); // 7: created
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_network_traffic_sensor__id ON network_traffic_sensor" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"network_traffic_sensor\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbNetworkTrafficSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
 
        Long rxBytes = entity.getRxBytes();
        if (rxBytes != null) {
            stmt.bindLong(3, rxBytes);
        }
 
        Long txBytes = entity.getTxBytes();
        if (txBytes != null) {
            stmt.bindLong(4, txBytes);
        }
 
        Boolean background = entity.getBackground();
        if (background != null) {
            stmt.bindLong(5, background ? 1L: 0L);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(6, longitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(7, latitude);
        }
        stmt.bindString(8, entity.getCreated());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbNetworkTrafficSensor readEntity(Cursor cursor, int offset) {
        DbNetworkTrafficSensor entity = new DbNetworkTrafficSensor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // rxBytes
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // txBytes
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // background
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // longitude
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // latitude
            cursor.getString(offset + 7) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbNetworkTrafficSensor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRxBytes(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTxBytes(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setBackground(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setLongitude(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setLatitude(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setCreated(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbNetworkTrafficSensor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbNetworkTrafficSensor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

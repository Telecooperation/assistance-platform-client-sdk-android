package de.tudarmstadt.informatik.tk.android.kraken.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.android.kraken.db.DbCalendarReminderEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "calendar_reminder_event".
*/
public class DbCalendarReminderEventDao extends AbstractDao<DbCalendarReminderEvent, Long> {

    public static final String TABLENAME = "calendar_reminder_event";

    /**
     * Properties of entity DbCalendarReminderEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EventId = new Property(1, Long.class, "eventId", false, "EVENT_ID");
        public final static Property Method = new Property(2, Integer.class, "method", false, "METHOD");
        public final static Property Minutes = new Property(3, Integer.class, "minutes", false, "MINUTES");
        public final static Property IsNew = new Property(4, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property IsUpdated = new Property(5, Boolean.class, "isUpdated", false, "IS_UPDATED");
        public final static Property IsDeleted = new Property(6, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Created = new Property(7, String.class, "created", false, "CREATED");
    };


    public DbCalendarReminderEventDao(DaoConfig config) {
        super(config);
    }
    
    public DbCalendarReminderEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"calendar_reminder_event\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EVENT_ID\" INTEGER," + // 1: eventId
                "\"METHOD\" INTEGER," + // 2: method
                "\"MINUTES\" INTEGER," + // 3: minutes
                "\"IS_NEW\" INTEGER," + // 4: isNew
                "\"IS_UPDATED\" INTEGER," + // 5: isUpdated
                "\"IS_DELETED\" INTEGER," + // 6: isDeleted
                "\"CREATED\" TEXT NOT NULL );"); // 7: created
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_calendar_reminder_event__id ON calendar_reminder_event" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"calendar_reminder_event\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbCalendarReminderEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(2, eventId);
        }
 
        Integer method = entity.getMethod();
        if (method != null) {
            stmt.bindLong(3, method);
        }
 
        Integer minutes = entity.getMinutes();
        if (minutes != null) {
            stmt.bindLong(4, minutes);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(5, isNew ? 1L: 0L);
        }
 
        Boolean isUpdated = entity.getIsUpdated();
        if (isUpdated != null) {
            stmt.bindLong(6, isUpdated ? 1L: 0L);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(7, isDeleted ? 1L: 0L);
        }
        stmt.bindString(8, entity.getCreated());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbCalendarReminderEvent readEntity(Cursor cursor, int offset) {
        DbCalendarReminderEvent entity = new DbCalendarReminderEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // eventId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // method
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // minutes
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isNew
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isUpdated
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isDeleted
            cursor.getString(offset + 7) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbCalendarReminderEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMethod(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMinutes(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsNew(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIsUpdated(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsDeleted(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCreated(cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbCalendarReminderEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbCalendarReminderEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

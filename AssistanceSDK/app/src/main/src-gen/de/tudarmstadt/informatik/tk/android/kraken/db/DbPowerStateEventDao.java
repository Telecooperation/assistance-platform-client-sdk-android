package de.tudarmstadt.informatik.tk.android.kraken.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.android.kraken.db.DbPowerStateEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "power_state_event".
*/
public class DbPowerStateEventDao extends AbstractDao<DbPowerStateEvent, Long> {

    public static final String TABLENAME = "power_state_event";

    /**
     * Properties of entity DbPowerStateEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property State = new Property(1, Integer.class, "state", false, "STATE");
        public final static Property IsLow = new Property(2, Boolean.class, "isLow", false, "IS_LOW");
        public final static Property IsOkay = new Property(3, Boolean.class, "isOkay", false, "IS_OKAY");
        public final static Property Created = new Property(4, String.class, "created", false, "CREATED");
    };


    public DbPowerStateEventDao(DaoConfig config) {
        super(config);
    }
    
    public DbPowerStateEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"power_state_event\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATE\" INTEGER," + // 1: state
                "\"IS_LOW\" INTEGER," + // 2: isLow
                "\"IS_OKAY\" INTEGER," + // 3: isOkay
                "\"CREATED\" TEXT NOT NULL );"); // 4: created
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_power_state_event__id ON power_state_event" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"power_state_event\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbPowerStateEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(2, state);
        }
 
        Boolean isLow = entity.getIsLow();
        if (isLow != null) {
            stmt.bindLong(3, isLow ? 1L: 0L);
        }
 
        Boolean isOkay = entity.getIsOkay();
        if (isOkay != null) {
            stmt.bindLong(4, isOkay ? 1L: 0L);
        }
        stmt.bindString(5, entity.getCreated());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbPowerStateEvent readEntity(Cursor cursor, int offset) {
        DbPowerStateEvent entity = new DbPowerStateEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // state
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isLow
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isOkay
            cursor.getString(offset + 4) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbPowerStateEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setState(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsLow(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setIsOkay(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setCreated(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbPowerStateEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbPowerStateEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

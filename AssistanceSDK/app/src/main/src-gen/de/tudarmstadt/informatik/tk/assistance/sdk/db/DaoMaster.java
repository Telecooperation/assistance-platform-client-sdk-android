package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbUserDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbUserSocialProfileDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbDeviceDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbModuleDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbModuleCapabilityDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbModuleAllowedCapabilitiesDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbNewsDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.LogsSensorUploadDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbPositionSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbGyroscopeSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbAccelerometerSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbMagneticFieldSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbMotionActivitySensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbConnectionSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbWifiConnectionSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbMobileConnectionSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbLoudnessSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbForegroundSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbLightSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbRingtoneSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbRunningProcessesSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbRunningServicesSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbRunningTasksSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbAccountReaderSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbNetworkTrafficSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbBrowserHistorySensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbCallLogSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbCalendarSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbCalendarReminderSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbContactSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbContactNumberSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbContactEmailSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbPowerStateSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbPowerLevelSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbTucanSensorDao;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbFacebookSensorDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 19): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 19;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        DbUserDao.createTable(db, ifNotExists);
        DbUserSocialProfileDao.createTable(db, ifNotExists);
        DbDeviceDao.createTable(db, ifNotExists);
        DbModuleDao.createTable(db, ifNotExists);
        DbModuleCapabilityDao.createTable(db, ifNotExists);
        DbModuleAllowedCapabilitiesDao.createTable(db, ifNotExists);
        DbNewsDao.createTable(db, ifNotExists);
        LogsSensorUploadDao.createTable(db, ifNotExists);
        DbPositionSensorDao.createTable(db, ifNotExists);
        DbGyroscopeSensorDao.createTable(db, ifNotExists);
        DbAccelerometerSensorDao.createTable(db, ifNotExists);
        DbMagneticFieldSensorDao.createTable(db, ifNotExists);
        DbMotionActivitySensorDao.createTable(db, ifNotExists);
        DbConnectionSensorDao.createTable(db, ifNotExists);
        DbWifiConnectionSensorDao.createTable(db, ifNotExists);
        DbMobileConnectionSensorDao.createTable(db, ifNotExists);
        DbLoudnessSensorDao.createTable(db, ifNotExists);
        DbForegroundSensorDao.createTable(db, ifNotExists);
        DbLightSensorDao.createTable(db, ifNotExists);
        DbRingtoneSensorDao.createTable(db, ifNotExists);
        DbRunningProcessesSensorDao.createTable(db, ifNotExists);
        DbRunningServicesSensorDao.createTable(db, ifNotExists);
        DbRunningTasksSensorDao.createTable(db, ifNotExists);
        DbAccountReaderSensorDao.createTable(db, ifNotExists);
        DbNetworkTrafficSensorDao.createTable(db, ifNotExists);
        DbBrowserHistorySensorDao.createTable(db, ifNotExists);
        DbCallLogSensorDao.createTable(db, ifNotExists);
        DbCalendarSensorDao.createTable(db, ifNotExists);
        DbCalendarReminderSensorDao.createTable(db, ifNotExists);
        DbContactSensorDao.createTable(db, ifNotExists);
        DbContactNumberSensorDao.createTable(db, ifNotExists);
        DbContactEmailSensorDao.createTable(db, ifNotExists);
        DbPowerStateSensorDao.createTable(db, ifNotExists);
        DbPowerLevelSensorDao.createTable(db, ifNotExists);
        DbTucanSensorDao.createTable(db, ifNotExists);
        DbFacebookSensorDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        DbUserDao.dropTable(db, ifExists);
        DbUserSocialProfileDao.dropTable(db, ifExists);
        DbDeviceDao.dropTable(db, ifExists);
        DbModuleDao.dropTable(db, ifExists);
        DbModuleCapabilityDao.dropTable(db, ifExists);
        DbModuleAllowedCapabilitiesDao.dropTable(db, ifExists);
        DbNewsDao.dropTable(db, ifExists);
        LogsSensorUploadDao.dropTable(db, ifExists);
        DbPositionSensorDao.dropTable(db, ifExists);
        DbGyroscopeSensorDao.dropTable(db, ifExists);
        DbAccelerometerSensorDao.dropTable(db, ifExists);
        DbMagneticFieldSensorDao.dropTable(db, ifExists);
        DbMotionActivitySensorDao.dropTable(db, ifExists);
        DbConnectionSensorDao.dropTable(db, ifExists);
        DbWifiConnectionSensorDao.dropTable(db, ifExists);
        DbMobileConnectionSensorDao.dropTable(db, ifExists);
        DbLoudnessSensorDao.dropTable(db, ifExists);
        DbForegroundSensorDao.dropTable(db, ifExists);
        DbLightSensorDao.dropTable(db, ifExists);
        DbRingtoneSensorDao.dropTable(db, ifExists);
        DbRunningProcessesSensorDao.dropTable(db, ifExists);
        DbRunningServicesSensorDao.dropTable(db, ifExists);
        DbRunningTasksSensorDao.dropTable(db, ifExists);
        DbAccountReaderSensorDao.dropTable(db, ifExists);
        DbNetworkTrafficSensorDao.dropTable(db, ifExists);
        DbBrowserHistorySensorDao.dropTable(db, ifExists);
        DbCallLogSensorDao.dropTable(db, ifExists);
        DbCalendarSensorDao.dropTable(db, ifExists);
        DbCalendarReminderSensorDao.dropTable(db, ifExists);
        DbContactSensorDao.dropTable(db, ifExists);
        DbContactNumberSensorDao.dropTable(db, ifExists);
        DbContactEmailSensorDao.dropTable(db, ifExists);
        DbPowerStateSensorDao.dropTable(db, ifExists);
        DbPowerLevelSensorDao.dropTable(db, ifExists);
        DbTucanSensorDao.dropTable(db, ifExists);
        DbFacebookSensorDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(DbUserDao.class);
        registerDaoClass(DbUserSocialProfileDao.class);
        registerDaoClass(DbDeviceDao.class);
        registerDaoClass(DbModuleDao.class);
        registerDaoClass(DbModuleCapabilityDao.class);
        registerDaoClass(DbModuleAllowedCapabilitiesDao.class);
        registerDaoClass(DbNewsDao.class);
        registerDaoClass(LogsSensorUploadDao.class);
        registerDaoClass(DbPositionSensorDao.class);
        registerDaoClass(DbGyroscopeSensorDao.class);
        registerDaoClass(DbAccelerometerSensorDao.class);
        registerDaoClass(DbMagneticFieldSensorDao.class);
        registerDaoClass(DbMotionActivitySensorDao.class);
        registerDaoClass(DbConnectionSensorDao.class);
        registerDaoClass(DbWifiConnectionSensorDao.class);
        registerDaoClass(DbMobileConnectionSensorDao.class);
        registerDaoClass(DbLoudnessSensorDao.class);
        registerDaoClass(DbForegroundSensorDao.class);
        registerDaoClass(DbLightSensorDao.class);
        registerDaoClass(DbRingtoneSensorDao.class);
        registerDaoClass(DbRunningProcessesSensorDao.class);
        registerDaoClass(DbRunningServicesSensorDao.class);
        registerDaoClass(DbRunningTasksSensorDao.class);
        registerDaoClass(DbAccountReaderSensorDao.class);
        registerDaoClass(DbNetworkTrafficSensorDao.class);
        registerDaoClass(DbBrowserHistorySensorDao.class);
        registerDaoClass(DbCallLogSensorDao.class);
        registerDaoClass(DbCalendarSensorDao.class);
        registerDaoClass(DbCalendarReminderSensorDao.class);
        registerDaoClass(DbContactSensorDao.class);
        registerDaoClass(DbContactNumberSensorDao.class);
        registerDaoClass(DbContactEmailSensorDao.class);
        registerDaoClass(DbPowerStateSensorDao.class);
        registerDaoClass(DbPowerLevelSensorDao.class);
        registerDaoClass(DbTucanSensorDao.class);
        registerDaoClass(DbFacebookSensorDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}

package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.assistance.sdk.db.DbContactSensor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "contact_sensor".
*/
public class DbContactSensorDao extends AbstractDao<DbContactSensor, Long> {

    public static final String TABLENAME = "contact_sensor";

    /**
     * Properties of entity DbContactSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContactId = new Property(1, Long.class, "contactId", false, "CONTACT_ID");
        public final static Property GlobalContactId = new Property(2, Long.class, "globalContactId", false, "GLOBAL_CONTACT_ID");
        public final static Property DisplayName = new Property(3, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property GivenName = new Property(4, String.class, "givenName", false, "GIVEN_NAME");
        public final static Property FamilyName = new Property(5, String.class, "familyName", false, "FAMILY_NAME");
        public final static Property Starred = new Property(6, Integer.class, "starred", false, "STARRED");
        public final static Property LastTimeContacted = new Property(7, Integer.class, "lastTimeContacted", false, "LAST_TIME_CONTACTED");
        public final static Property TimesContacted = new Property(8, Integer.class, "timesContacted", false, "TIMES_CONTACTED");
        public final static Property Note = new Property(9, String.class, "note", false, "NOTE");
        public final static Property IsNew = new Property(10, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property IsUpdated = new Property(11, Boolean.class, "isUpdated", false, "IS_UPDATED");
        public final static Property IsDeleted = new Property(12, Boolean.class, "isDeleted", false, "IS_DELETED");
        public final static Property Created = new Property(13, String.class, "created", false, "CREATED");
        public final static Property DeviceId = new Property(14, Long.class, "deviceId", false, "DEVICE_ID");
    };

    private DaoSession daoSession;


    public DbContactSensorDao(DaoConfig config) {
        super(config);
    }
    
    public DbContactSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"contact_sensor\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTACT_ID\" INTEGER," + // 1: contactId
                "\"GLOBAL_CONTACT_ID\" INTEGER," + // 2: globalContactId
                "\"DISPLAY_NAME\" TEXT," + // 3: displayName
                "\"GIVEN_NAME\" TEXT," + // 4: givenName
                "\"FAMILY_NAME\" TEXT," + // 5: familyName
                "\"STARRED\" INTEGER," + // 6: starred
                "\"LAST_TIME_CONTACTED\" INTEGER," + // 7: lastTimeContacted
                "\"TIMES_CONTACTED\" INTEGER," + // 8: timesContacted
                "\"NOTE\" TEXT," + // 9: note
                "\"IS_NEW\" INTEGER," + // 10: isNew
                "\"IS_UPDATED\" INTEGER," + // 11: isUpdated
                "\"IS_DELETED\" INTEGER," + // 12: isDeleted
                "\"CREATED\" TEXT NOT NULL ," + // 13: created
                "\"DEVICE_ID\" INTEGER);"); // 14: deviceId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_contact_sensor__id ON contact_sensor" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_contact_sensor_DEVICE_ID ON contact_sensor" +
                " (\"DEVICE_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"contact_sensor\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbContactSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(2, contactId);
        }
 
        Long globalContactId = entity.getGlobalContactId();
        if (globalContactId != null) {
            stmt.bindLong(3, globalContactId);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(4, displayName);
        }
 
        String givenName = entity.getGivenName();
        if (givenName != null) {
            stmt.bindString(5, givenName);
        }
 
        String familyName = entity.getFamilyName();
        if (familyName != null) {
            stmt.bindString(6, familyName);
        }
 
        Integer starred = entity.getStarred();
        if (starred != null) {
            stmt.bindLong(7, starred);
        }
 
        Integer lastTimeContacted = entity.getLastTimeContacted();
        if (lastTimeContacted != null) {
            stmt.bindLong(8, lastTimeContacted);
        }
 
        Integer timesContacted = entity.getTimesContacted();
        if (timesContacted != null) {
            stmt.bindLong(9, timesContacted);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(10, note);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(11, isNew ? 1L: 0L);
        }
 
        Boolean isUpdated = entity.getIsUpdated();
        if (isUpdated != null) {
            stmt.bindLong(12, isUpdated ? 1L: 0L);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(13, isDeleted ? 1L: 0L);
        }
        stmt.bindString(14, entity.getCreated());
 
        Long deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindLong(15, deviceId);
        }
    }

    @Override
    protected void attachEntity(DbContactSensor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbContactSensor readEntity(Cursor cursor, int offset) {
        DbContactSensor entity = new DbContactSensor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // contactId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // globalContactId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // displayName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // givenName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // familyName
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // starred
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // lastTimeContacted
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // timesContacted
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // note
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isNew
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isUpdated
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isDeleted
            cursor.getString(offset + 13), // created
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14) // deviceId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbContactSensor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContactId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGlobalContactId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDisplayName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGivenName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFamilyName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStarred(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLastTimeContacted(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTimesContacted(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNote(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsNew(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsUpdated(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setIsDeleted(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setCreated(cursor.getString(offset + 13));
        entity.setDeviceId(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DbContactSensor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DbContactSensor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDbDeviceDao().getAllColumns());
            builder.append(" FROM contact_sensor T");
            builder.append(" LEFT JOIN device T0 ON T.\"DEVICE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DbContactSensor loadCurrentDeep(Cursor cursor, boolean lock) {
        DbContactSensor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DbDevice dbDevice = loadCurrentOther(daoSession.getDbDeviceDao(), cursor, offset);
        entity.setDbDevice(dbDevice);

        return entity;    
    }

    public DbContactSensor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DbContactSensor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DbContactSensor> list = new ArrayList<DbContactSensor>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DbContactSensor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DbContactSensor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

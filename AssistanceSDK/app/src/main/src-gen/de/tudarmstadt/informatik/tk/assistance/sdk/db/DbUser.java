package de.tudarmstadt.informatik.tk.assistance.sdk.db;

import java.util.List;
import de.tudarmstadt.informatik.tk.assistance.sdk.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "user".
 */
public class DbUser {

    private Long id;
    private String token;
    private String firstname;
    private String lastname;
    /** Not-null value. */
    private String primaryEmail;
    private String userpicFilename;
    private String lastLogin;
    private String joinedSince;
    private String uuid;
    /** Not-null value. */
    private String created;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DbUserDao myDao;

    private List<DbUserSocialProfile> dbUserSocialProfileList;
    private List<DbDevice> dbDeviceList;
    private List<DbModule> dbModuleList;
    private List<DbModuleAllowedCapabilities> dbModuleAllowedCapabilitiesList;
    private List<DbNews> dbNewsList;

    public DbUser() {
    }

    public DbUser(Long id) {
        this.id = id;
    }

    public DbUser(Long id, String token, String firstname, String lastname, String primaryEmail, String userpicFilename, String lastLogin, String joinedSince, String uuid, String created) {
        this.id = id;
        this.token = token;
        this.firstname = firstname;
        this.lastname = lastname;
        this.primaryEmail = primaryEmail;
        this.userpicFilename = userpicFilename;
        this.lastLogin = lastLogin;
        this.joinedSince = joinedSince;
        this.uuid = uuid;
        this.created = created;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDbUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /** Not-null value. */
    public String getPrimaryEmail() {
        return primaryEmail;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrimaryEmail(String primaryEmail) {
        this.primaryEmail = primaryEmail;
    }

    public String getUserpicFilename() {
        return userpicFilename;
    }

    public void setUserpicFilename(String userpicFilename) {
        this.userpicFilename = userpicFilename;
    }

    public String getLastLogin() {
        return lastLogin;
    }

    public void setLastLogin(String lastLogin) {
        this.lastLogin = lastLogin;
    }

    public String getJoinedSince() {
        return joinedSince;
    }

    public void setJoinedSince(String joinedSince) {
        this.joinedSince = joinedSince;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    /** Not-null value. */
    public String getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(String created) {
        this.created = created;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbUserSocialProfile> getDbUserSocialProfileList() {
        if (dbUserSocialProfileList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbUserSocialProfileDao targetDao = daoSession.getDbUserSocialProfileDao();
            List<DbUserSocialProfile> dbUserSocialProfileListNew = targetDao._queryDbUser_DbUserSocialProfileList(id);
            synchronized (this) {
                if(dbUserSocialProfileList == null) {
                    dbUserSocialProfileList = dbUserSocialProfileListNew;
                }
            }
        }
        return dbUserSocialProfileList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbUserSocialProfileList() {
        dbUserSocialProfileList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbDevice> getDbDeviceList() {
        if (dbDeviceList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbDeviceDao targetDao = daoSession.getDbDeviceDao();
            List<DbDevice> dbDeviceListNew = targetDao._queryDbUser_DbDeviceList(id);
            synchronized (this) {
                if(dbDeviceList == null) {
                    dbDeviceList = dbDeviceListNew;
                }
            }
        }
        return dbDeviceList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbDeviceList() {
        dbDeviceList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbModule> getDbModuleList() {
        if (dbModuleList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbModuleDao targetDao = daoSession.getDbModuleDao();
            List<DbModule> dbModuleListNew = targetDao._queryDbUser_DbModuleList(id);
            synchronized (this) {
                if(dbModuleList == null) {
                    dbModuleList = dbModuleListNew;
                }
            }
        }
        return dbModuleList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbModuleList() {
        dbModuleList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbModuleAllowedCapabilities> getDbModuleAllowedCapabilitiesList() {
        if (dbModuleAllowedCapabilitiesList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbModuleAllowedCapabilitiesDao targetDao = daoSession.getDbModuleAllowedCapabilitiesDao();
            List<DbModuleAllowedCapabilities> dbModuleAllowedCapabilitiesListNew = targetDao._queryDbUser_DbModuleAllowedCapabilitiesList(id);
            synchronized (this) {
                if(dbModuleAllowedCapabilitiesList == null) {
                    dbModuleAllowedCapabilitiesList = dbModuleAllowedCapabilitiesListNew;
                }
            }
        }
        return dbModuleAllowedCapabilitiesList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbModuleAllowedCapabilitiesList() {
        dbModuleAllowedCapabilitiesList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DbNews> getDbNewsList() {
        if (dbNewsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DbNewsDao targetDao = daoSession.getDbNewsDao();
            List<DbNews> dbNewsListNew = targetDao._queryDbUser_DbNewsList(id);
            synchronized (this) {
                if(dbNewsList == null) {
                    dbNewsList = dbNewsListNew;
                }
            }
        }
        return dbNewsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbNewsList() {
        dbNewsList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

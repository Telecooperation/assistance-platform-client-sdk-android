package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorLoudness;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SENSOR_LOUDNESS.
*/
public class SensorLoudnessDao extends AbstractDao<SensorLoudness, Long> {

    public static final String TABLENAME = "SENSOR_LOUDNESS";

    /**
     * Properties of entity SensorLoudness.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Loudness = new Property(1, Float.class, "loudness", false, "LOUDNESS");
        public final static Property StartTimestamp = new Property(2, Long.class, "startTimestamp", false, "START_TIMESTAMP");
        public final static Property Timestamp = new Property(3, Long.class, "timestamp", false, "TIMESTAMP");
    };


    public SensorLoudnessDao(DaoConfig config) {
        super(config);
    }
    
    public SensorLoudnessDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SENSOR_LOUDNESS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOUDNESS' REAL," + // 1: loudness
                "'START_TIMESTAMP' INTEGER," + // 2: startTimestamp
                "'TIMESTAMP' INTEGER);"); // 3: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SENSOR_LOUDNESS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SensorLoudness entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float loudness = entity.getLoudness();
        if (loudness != null) {
            stmt.bindDouble(2, loudness);
        }
 
        Long startTimestamp = entity.getStartTimestamp();
        if (startTimestamp != null) {
            stmt.bindLong(3, startTimestamp);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(4, timestamp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SensorLoudness readEntity(Cursor cursor, int offset) {
        SensorLoudness entity = new SensorLoudness( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // loudness
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // startTimestamp
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SensorLoudness entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoudness(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setStartTimestamp(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTimestamp(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SensorLoudness entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SensorLoudness entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

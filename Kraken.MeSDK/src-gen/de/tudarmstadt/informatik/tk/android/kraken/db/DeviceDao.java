package de.tudarmstadt.informatik.tk.android.kraken.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.tudarmstadt.informatik.tk.android.kraken.db.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "device".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "device";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceIdentifier = new Property(1, String.class, "deviceIdentifier", false, "DEVICE_IDENTIFIER");
        public final static Property Os = new Property(2, String.class, "os", false, "OS");
        public final static Property OsVersion = new Property(3, String.class, "osVersion", false, "OS_VERSION");
        public final static Property Brand = new Property(4, String.class, "brand", false, "BRAND");
        public final static Property Model = new Property(5, String.class, "model", false, "MODEL");
        public final static Property MessagingRegistrationId = new Property(6, String.class, "messagingRegistrationId", false, "MESSAGING_REGISTRATION_ID");
        public final static Property UserDefinedName = new Property(7, String.class, "userDefinedName", false, "USER_DEFINED_NAME");
        public final static Property Created = new Property(8, String.class, "created", false, "CREATED");
        public final static Property LoginId = new Property(9, Long.class, "loginId", false, "LOGIN_ID");
        public final static Property UserId = new Property(10, Long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Device> login_DeviceListQuery;
    private Query<Device> user_DeviceListQuery;

    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"device\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_IDENTIFIER\" TEXT," + // 1: deviceIdentifier
                "\"OS\" TEXT," + // 2: os
                "\"OS_VERSION\" TEXT," + // 3: osVersion
                "\"BRAND\" TEXT," + // 4: brand
                "\"MODEL\" TEXT," + // 5: model
                "\"MESSAGING_REGISTRATION_ID\" TEXT," + // 6: messagingRegistrationId
                "\"USER_DEFINED_NAME\" TEXT," + // 7: userDefinedName
                "\"CREATED\" TEXT NOT NULL ," + // 8: created
                "\"LOGIN_ID\" INTEGER," + // 9: loginId
                "\"USER_ID\" INTEGER);"); // 10: userId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_device__id ON device" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_device_LOGIN_ID ON device" +
                " (\"LOGIN_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_device_USER_ID ON device" +
                " (\"USER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"device\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceIdentifier = entity.getDeviceIdentifier();
        if (deviceIdentifier != null) {
            stmt.bindString(2, deviceIdentifier);
        }
 
        String os = entity.getOs();
        if (os != null) {
            stmt.bindString(3, os);
        }
 
        String osVersion = entity.getOsVersion();
        if (osVersion != null) {
            stmt.bindString(4, osVersion);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(6, model);
        }
 
        String messagingRegistrationId = entity.getMessagingRegistrationId();
        if (messagingRegistrationId != null) {
            stmt.bindString(7, messagingRegistrationId);
        }
 
        String userDefinedName = entity.getUserDefinedName();
        if (userDefinedName != null) {
            stmt.bindString(8, userDefinedName);
        }
        stmt.bindString(9, entity.getCreated());
 
        Long loginId = entity.getLoginId();
        if (loginId != null) {
            stmt.bindLong(10, loginId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(11, userId);
        }
    }

    @Override
    protected void attachEntity(Device entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceIdentifier
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // os
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // osVersion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // brand
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // model
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // messagingRegistrationId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userDefinedName
            cursor.getString(offset + 8), // created
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // loginId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceIdentifier(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOs(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOsVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBrand(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessagingRegistrationId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserDefinedName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreated(cursor.getString(offset + 8));
        entity.setLoginId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "deviceList" to-many relationship of Login. */
    public List<Device> _queryLogin_DeviceList(Long loginId) {
        synchronized (this) {
            if (login_DeviceListQuery == null) {
                QueryBuilder<Device> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LoginId.eq(null));
                login_DeviceListQuery = queryBuilder.build();
            }
        }
        Query<Device> query = login_DeviceListQuery.forCurrentThread();
        query.setParameter(0, loginId);
        return query.list();
    }

    /** Internal query to resolve the "deviceList" to-many relationship of User. */
    public List<Device> _queryUser_DeviceList(Long userId) {
        synchronized (this) {
            if (user_DeviceListQuery == null) {
                QueryBuilder<Device> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_DeviceListQuery = queryBuilder.build();
            }
        }
        Query<Device> query = user_DeviceListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLoginDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM device T");
            builder.append(" LEFT JOIN login T0 ON T.\"LOGIN_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN user T1 ON T.\"USER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Device loadCurrentDeep(Cursor cursor, boolean lock) {
        Device entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Login login = loadCurrentOther(daoSession.getLoginDao(), cursor, offset);
        entity.setLogin(login);
        offset += daoSession.getLoginDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Device loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Device> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Device> list = new ArrayList<Device>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Device> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Device> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

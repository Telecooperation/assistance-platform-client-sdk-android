package de.tudarmstadt.informatik.tk.android.kraken.db;

import de.tudarmstadt.informatik.tk.android.kraken.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "module_capability".
 */
public class ModuleCapability {

    private Long id;
    /** Not-null value. */
    private String type;
    private Double frequency;
    private boolean required;
    /** Not-null value. */
    private String created;
    private Long moduleId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ModuleCapabilityDao myDao;

    private Module module;
    private Long module__resolvedKey;


    public ModuleCapability() {
    }

    public ModuleCapability(Long id) {
        this.id = id;
    }

    public ModuleCapability(Long id, String type, Double frequency, boolean required, String created, Long moduleId) {
        this.id = id;
        this.type = type;
        this.frequency = frequency;
        this.required = required;
        this.created = created;
        this.moduleId = moduleId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getModuleCapabilityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(String type) {
        this.type = type;
    }

    public Double getFrequency() {
        return frequency;
    }

    public void setFrequency(Double frequency) {
        this.frequency = frequency;
    }

    public boolean getRequired() {
        return required;
    }

    public void setRequired(boolean required) {
        this.required = required;
    }

    /** Not-null value. */
    public String getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(String created) {
        this.created = created;
    }

    public Long getModuleId() {
        return moduleId;
    }

    public void setModuleId(Long moduleId) {
        this.moduleId = moduleId;
    }

    /** To-one relationship, resolved on first access. */
    public Module getModule() {
        Long __key = this.moduleId;
        if (module__resolvedKey == null || !module__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ModuleDao targetDao = daoSession.getModuleDao();
            Module moduleNew = targetDao.load(__key);
            synchronized (this) {
                module = moduleNew;
            	module__resolvedKey = __key;
            }
        }
        return module;
    }

    public void setModule(Module module) {
        synchronized (this) {
            this.module = module;
            moduleId = module == null ? null : module.getId();
            module__resolvedKey = moduleId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

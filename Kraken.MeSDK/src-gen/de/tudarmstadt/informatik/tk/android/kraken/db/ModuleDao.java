package de.tudarmstadt.informatik.tk.android.kraken.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.android.kraken.db.Module;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "module".
*/
public class ModuleDao extends AbstractDao<Module, Long> {

    public static final String TABLENAME = "module";

    /**
     * Properties of entity Module.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property LogoUrl = new Property(3, String.class, "logoUrl", false, "LOGO_URL");
        public final static Property DescriptionShort = new Property(4, String.class, "descriptionShort", false, "DESCRIPTION_SHORT");
        public final static Property DescriptionFull = new Property(5, String.class, "descriptionFull", false, "DESCRIPTION_FULL");
        public final static Property Copyright = new Property(6, String.class, "copyright", false, "COPYRIGHT");
        public final static Property SupportEmail = new Property(7, String.class, "supportEmail", false, "SUPPORT_EMAIL");
        public final static Property Created = new Property(8, String.class, "created", false, "CREATED");
    };

    private DaoSession daoSession;


    public ModuleDao(DaoConfig config) {
        super(config);
    }
    
    public ModuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"module\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"PACKAGE_NAME\" TEXT NOT NULL ," + // 1: packageName
                "\"TITLE\" TEXT NOT NULL ," + // 2: title
                "\"LOGO_URL\" TEXT NOT NULL ," + // 3: logoUrl
                "\"DESCRIPTION_SHORT\" TEXT NOT NULL ," + // 4: descriptionShort
                "\"DESCRIPTION_FULL\" TEXT NOT NULL ," + // 5: descriptionFull
                "\"COPYRIGHT\" TEXT NOT NULL ," + // 6: copyright
                "\"SUPPORT_EMAIL\" TEXT NOT NULL ," + // 7: supportEmail
                "\"CREATED\" TEXT NOT NULL );"); // 8: created
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_module__id ON module" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_PACKAGE_NAME ON module" +
                " (\"PACKAGE_NAME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"module\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Module entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getPackageName());
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getLogoUrl());
        stmt.bindString(5, entity.getDescriptionShort());
        stmt.bindString(6, entity.getDescriptionFull());
        stmt.bindString(7, entity.getCopyright());
        stmt.bindString(8, entity.getSupportEmail());
        stmt.bindString(9, entity.getCreated());
    }

    @Override
    protected void attachEntity(Module entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Module readEntity(Cursor cursor, int offset) {
        Module entity = new Module( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // packageName
            cursor.getString(offset + 2), // title
            cursor.getString(offset + 3), // logoUrl
            cursor.getString(offset + 4), // descriptionShort
            cursor.getString(offset + 5), // descriptionFull
            cursor.getString(offset + 6), // copyright
            cursor.getString(offset + 7), // supportEmail
            cursor.getString(offset + 8) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Module entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPackageName(cursor.getString(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setLogoUrl(cursor.getString(offset + 3));
        entity.setDescriptionShort(cursor.getString(offset + 4));
        entity.setDescriptionFull(cursor.getString(offset + 5));
        entity.setCopyright(cursor.getString(offset + 6));
        entity.setSupportEmail(cursor.getString(offset + 7));
        entity.setCreated(cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Module entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Module entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

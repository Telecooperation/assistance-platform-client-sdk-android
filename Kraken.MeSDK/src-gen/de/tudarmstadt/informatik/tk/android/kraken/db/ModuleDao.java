package de.tudarmstadt.informatik.tk.android.kraken.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.tudarmstadt.informatik.tk.android.kraken.db.Module;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "module".
*/
public class ModuleDao extends AbstractDao<Module, Long> {

    public static final String TABLENAME = "module";

    /**
     * Properties of entity Module.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Package_name = new Property(1, String.class, "package_name", false, "PACKAGE_NAME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Logo_url = new Property(3, String.class, "logo_url", false, "LOGO_URL");
        public final static Property Description_short = new Property(4, String.class, "description_short", false, "DESCRIPTION_SHORT");
        public final static Property Description_full = new Property(5, String.class, "description_full", false, "DESCRIPTION_FULL");
        public final static Property Copyright = new Property(6, String.class, "copyright", false, "COPYRIGHT");
        public final static Property Support_email = new Property(7, String.class, "support_email", false, "SUPPORT_EMAIL");
        public final static Property Created = new Property(8, String.class, "created", false, "CREATED");
        public final static Property User_id = new Property(9, long.class, "user_id", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<Module> user_ModuleListQuery;

    public ModuleDao(DaoConfig config) {
        super(config);
    }
    
    public ModuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"module\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"PACKAGE_NAME\" TEXT NOT NULL ," + // 1: package_name
                "\"TITLE\" TEXT," + // 2: title
                "\"LOGO_URL\" TEXT," + // 3: logo_url
                "\"DESCRIPTION_SHORT\" TEXT," + // 4: description_short
                "\"DESCRIPTION_FULL\" TEXT," + // 5: description_full
                "\"COPYRIGHT\" TEXT," + // 6: copyright
                "\"SUPPORT_EMAIL\" TEXT," + // 7: support_email
                "\"CREATED\" TEXT NOT NULL ," + // 8: created
                "\"USER_ID\" INTEGER NOT NULL );"); // 9: user_id
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_module__id ON module" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_PACKAGE_NAME ON module" +
                " (\"PACKAGE_NAME\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_USER_ID ON module" +
                " (\"USER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"module\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Module entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getPackage_name());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String logo_url = entity.getLogo_url();
        if (logo_url != null) {
            stmt.bindString(4, logo_url);
        }
 
        String description_short = entity.getDescription_short();
        if (description_short != null) {
            stmt.bindString(5, description_short);
        }
 
        String description_full = entity.getDescription_full();
        if (description_full != null) {
            stmt.bindString(6, description_full);
        }
 
        String copyright = entity.getCopyright();
        if (copyright != null) {
            stmt.bindString(7, copyright);
        }
 
        String support_email = entity.getSupport_email();
        if (support_email != null) {
            stmt.bindString(8, support_email);
        }
        stmt.bindString(9, entity.getCreated());
        stmt.bindLong(10, entity.getUser_id());
    }

    @Override
    protected void attachEntity(Module entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Module readEntity(Cursor cursor, int offset) {
        Module entity = new Module( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // package_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logo_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description_short
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description_full
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // copyright
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // support_email
            cursor.getString(offset + 8), // created
            cursor.getLong(offset + 9) // user_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Module entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPackage_name(cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogo_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription_short(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription_full(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCopyright(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSupport_email(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreated(cursor.getString(offset + 8));
        entity.setUser_id(cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Module entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Module entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "moduleList" to-many relationship of User. */
    public List<Module> _queryUser_ModuleList(long user_id) {
        synchronized (this) {
            if (user_ModuleListQuery == null) {
                QueryBuilder<Module> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.User_id.eq(null));
                user_ModuleListQuery = queryBuilder.build();
            }
        }
        Query<Module> query = user_ModuleListQuery.forCurrentThread();
        query.setParameter(0, user_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM module T");
            builder.append(" LEFT JOIN user T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Module loadCurrentDeep(Cursor cursor, boolean lock) {
        Module entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public Module loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Module> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Module> list = new ArrayList<Module>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Module> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Module> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package de.tudarmstadt.informatik.tk.android.kraken.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import de.tudarmstadt.informatik.tk.android.kraken.db.ModuleInstallation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "module_installation".
*/
public class ModuleInstallationDao extends AbstractDao<ModuleInstallation, Long> {

    public static final String TABLENAME = "module_installation";

    /**
     * Properties of entity ModuleInstallation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Active = new Property(1, boolean.class, "active", false, "ACTIVE");
        public final static Property Created = new Property(2, String.class, "created", false, "CREATED");
        public final static Property ModuleId = new Property(3, Long.class, "moduleId", false, "MODULE_ID");
        public final static Property UserId = new Property(4, Long.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;

    private Query<ModuleInstallation> module_ModuleInstallationListQuery;
    private Query<ModuleInstallation> user_ModuleInstallationListQuery;

    public ModuleInstallationDao(DaoConfig config) {
        super(config);
    }
    
    public ModuleInstallationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"module_installation\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACTIVE\" INTEGER NOT NULL ," + // 1: active
                "\"CREATED\" TEXT NOT NULL ," + // 2: created
                "\"MODULE_ID\" INTEGER," + // 3: moduleId
                "\"USER_ID\" INTEGER);"); // 4: userId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_installation__id ON module_installation" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_installation_MODULE_ID ON module_installation" +
                " (\"MODULE_ID\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_module_installation_USER_ID ON module_installation" +
                " (\"USER_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"module_installation\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ModuleInstallation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getActive() ? 1L: 0L);
        stmt.bindString(3, entity.getCreated());
 
        Long moduleId = entity.getModuleId();
        if (moduleId != null) {
            stmt.bindLong(4, moduleId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(5, userId);
        }
    }

    @Override
    protected void attachEntity(ModuleInstallation entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ModuleInstallation readEntity(Cursor cursor, int offset) {
        ModuleInstallation entity = new ModuleInstallation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // active
            cursor.getString(offset + 2), // created
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // moduleId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ModuleInstallation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActive(cursor.getShort(offset + 1) != 0);
        entity.setCreated(cursor.getString(offset + 2));
        entity.setModuleId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ModuleInstallation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ModuleInstallation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "moduleInstallationList" to-many relationship of Module. */
    public List<ModuleInstallation> _queryModule_ModuleInstallationList(Long moduleId) {
        synchronized (this) {
            if (module_ModuleInstallationListQuery == null) {
                QueryBuilder<ModuleInstallation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ModuleId.eq(null));
                module_ModuleInstallationListQuery = queryBuilder.build();
            }
        }
        Query<ModuleInstallation> query = module_ModuleInstallationListQuery.forCurrentThread();
        query.setParameter(0, moduleId);
        return query.list();
    }

    /** Internal query to resolve the "moduleInstallationList" to-many relationship of User. */
    public List<ModuleInstallation> _queryUser_ModuleInstallationList(Long userId) {
        synchronized (this) {
            if (user_ModuleInstallationListQuery == null) {
                QueryBuilder<ModuleInstallation> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_ModuleInstallationListQuery = queryBuilder.build();
            }
        }
        Query<ModuleInstallation> query = user_ModuleInstallationListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getModuleDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM module_installation T");
            builder.append(" LEFT JOIN module T0 ON T.\"MODULE_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN user T1 ON T.\"USER_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ModuleInstallation loadCurrentDeep(Cursor cursor, boolean lock) {
        ModuleInstallation entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Module module = loadCurrentOther(daoSession.getModuleDao(), cursor, offset);
        entity.setModule(module);
        offset += daoSession.getModuleDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public ModuleInstallation loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ModuleInstallation> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ModuleInstallation> list = new ArrayList<ModuleInstallation>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ModuleInstallation> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ModuleInstallation> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package de.tudarmstadt.informatik.tk.android.kraken.db;

import java.util.List;
import de.tudarmstadt.informatik.tk.android.kraken.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "user".
 */
public class User {

    private long id;
    private String firstname;
    private String lastname;
    /** Not-null value. */
    private String primaryEmail;
    private String user_pic_filename;
    private String lastLogin;
    private String joinedSince;
    /** Not-null value. */
    private String created;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<UserSocialProfile> userSocialProfileList;
    private List<Module> moduleList;
    private List<ModuleInstallation> moduleInstallationList;

    public User() {
    }

    public User(long id) {
        this.id = id;
    }

    public User(long id, String firstname, String lastname, String primaryEmail, String user_pic_filename, String lastLogin, String joinedSince, String created) {
        this.id = id;
        this.firstname = firstname;
        this.lastname = lastname;
        this.primaryEmail = primaryEmail;
        this.user_pic_filename = user_pic_filename;
        this.lastLogin = lastLogin;
        this.joinedSince = joinedSince;
        this.created = created;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /** Not-null value. */
    public String getPrimaryEmail() {
        return primaryEmail;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrimaryEmail(String primaryEmail) {
        this.primaryEmail = primaryEmail;
    }

    public String getUser_pic_filename() {
        return user_pic_filename;
    }

    public void setUser_pic_filename(String user_pic_filename) {
        this.user_pic_filename = user_pic_filename;
    }

    public String getLastLogin() {
        return lastLogin;
    }

    public void setLastLogin(String lastLogin) {
        this.lastLogin = lastLogin;
    }

    public String getJoinedSince() {
        return joinedSince;
    }

    public void setJoinedSince(String joinedSince) {
        this.joinedSince = joinedSince;
    }

    /** Not-null value. */
    public String getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(String created) {
        this.created = created;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<UserSocialProfile> getUserSocialProfileList() {
        if (userSocialProfileList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserSocialProfileDao targetDao = daoSession.getUserSocialProfileDao();
            List<UserSocialProfile> userSocialProfileListNew = targetDao._queryUser_UserSocialProfileList(id);
            synchronized (this) {
                if(userSocialProfileList == null) {
                    userSocialProfileList = userSocialProfileListNew;
                }
            }
        }
        return userSocialProfileList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUserSocialProfileList() {
        userSocialProfileList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Module> getModuleList() {
        if (moduleList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ModuleDao targetDao = daoSession.getModuleDao();
            List<Module> moduleListNew = targetDao._queryUser_ModuleList(id);
            synchronized (this) {
                if(moduleList == null) {
                    moduleList = moduleListNew;
                }
            }
        }
        return moduleList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetModuleList() {
        moduleList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ModuleInstallation> getModuleInstallationList() {
        if (moduleInstallationList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ModuleInstallationDao targetDao = daoSession.getModuleInstallationDao();
            List<ModuleInstallation> moduleInstallationListNew = targetDao._queryUser_ModuleInstallationList(id);
            synchronized (this) {
                if(moduleInstallationList == null) {
                    moduleInstallationList = moduleInstallationListNew;
                }
            }
        }
        return moduleInstallationList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetModuleInstallationList() {
        moduleInstallationList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

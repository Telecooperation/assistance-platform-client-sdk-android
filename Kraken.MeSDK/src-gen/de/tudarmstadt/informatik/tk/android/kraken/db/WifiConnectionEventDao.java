package de.tudarmstadt.informatik.tk.android.kraken.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "wifi_connection_event".
*/
public class WifiConnectionEventDao extends AbstractDao<WifiConnectionEvent, Long> {

    public static final String TABLENAME = "wifi_connection_event";

    /**
     * Properties of entity WifiConnectionEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Ssid = new Property(1, String.class, "ssid", false, "SSID");
        public final static Property Bssid = new Property(2, String.class, "bssid", false, "BSSID");
        public final static Property Created = new Property(3, String.class, "created", false, "CREATED");
        public final static Property Channel = new Property(4, Integer.class, "channel", false, "CHANNEL");
        public final static Property Frequency = new Property(5, Integer.class, "frequency", false, "FREQUENCY");
        public final static Property LinkSpeed = new Property(6, Integer.class, "linkSpeed", false, "LINK_SPEED");
        public final static Property SignalStrength = new Property(7, Integer.class, "signalStrength", false, "SIGNAL_STRENGTH");
        public final static Property NetworkId = new Property(8, Integer.class, "networkId", false, "NETWORK_ID");
    };


    public WifiConnectionEventDao(DaoConfig config) {
        super(config);
    }
    
    public WifiConnectionEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"wifi_connection_event\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"SSID\" TEXT," + // 1: ssid
                "\"BSSID\" TEXT," + // 2: bssid
                "\"CREATED\" TEXT NOT NULL ," + // 3: created
                "\"CHANNEL\" INTEGER," + // 4: channel
                "\"FREQUENCY\" INTEGER," + // 5: frequency
                "\"LINK_SPEED\" INTEGER," + // 6: linkSpeed
                "\"SIGNAL_STRENGTH\" INTEGER," + // 7: signalStrength
                "\"NETWORK_ID\" INTEGER);"); // 8: networkId
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_wifi_connection_event__id ON wifi_connection_event" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"wifi_connection_event\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WifiConnectionEvent entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String ssid = entity.getSsid();
        if (ssid != null) {
            stmt.bindString(2, ssid);
        }
 
        String bssid = entity.getBssid();
        if (bssid != null) {
            stmt.bindString(3, bssid);
        }
        stmt.bindString(4, entity.getCreated());
 
        Integer channel = entity.getChannel();
        if (channel != null) {
            stmt.bindLong(5, channel);
        }
 
        Integer frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindLong(6, frequency);
        }
 
        Integer linkSpeed = entity.getLinkSpeed();
        if (linkSpeed != null) {
            stmt.bindLong(7, linkSpeed);
        }
 
        Integer signalStrength = entity.getSignalStrength();
        if (signalStrength != null) {
            stmt.bindLong(8, signalStrength);
        }
 
        Integer networkId = entity.getNetworkId();
        if (networkId != null) {
            stmt.bindLong(9, networkId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WifiConnectionEvent readEntity(Cursor cursor, int offset) {
        WifiConnectionEvent entity = new WifiConnectionEvent( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ssid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bssid
            cursor.getString(offset + 3), // created
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // channel
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // frequency
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // linkSpeed
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // signalStrength
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // networkId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WifiConnectionEvent entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSsid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBssid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated(cursor.getString(offset + 3));
        entity.setChannel(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFrequency(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLinkSpeed(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSignalStrength(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setNetworkId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WifiConnectionEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WifiConnectionEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorMeasurementLogDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorAccelerometerDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorActivityDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorConnectionDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorNetworkTrafficDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorLightDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorLocationDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorRingtoneDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorLoudnessDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorAccountsReaderDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorRunningProcessesDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorRunningServicesDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorRunningTasksDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorContactDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorContactNumberDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorContactMailDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorCalendarEventDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorCalendarEventReminderDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorCallLogDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorBrowserHistoryDao;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorForegroundEventDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 5): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 5;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        SensorMeasurementLogDao.createTable(db, ifNotExists);
        SensorAccelerometerDao.createTable(db, ifNotExists);
        SensorActivityDao.createTable(db, ifNotExists);
        SensorConnectionDao.createTable(db, ifNotExists);
        SensorNetworkTrafficDao.createTable(db, ifNotExists);
        SensorLightDao.createTable(db, ifNotExists);
        SensorLocationDao.createTable(db, ifNotExists);
        SensorRingtoneDao.createTable(db, ifNotExists);
        SensorLoudnessDao.createTable(db, ifNotExists);
        SensorAccountsReaderDao.createTable(db, ifNotExists);
        SensorRunningProcessesDao.createTable(db, ifNotExists);
        SensorRunningServicesDao.createTable(db, ifNotExists);
        SensorRunningTasksDao.createTable(db, ifNotExists);
        SensorContactDao.createTable(db, ifNotExists);
        SensorContactNumberDao.createTable(db, ifNotExists);
        SensorContactMailDao.createTable(db, ifNotExists);
        SensorCalendarEventDao.createTable(db, ifNotExists);
        SensorCalendarEventReminderDao.createTable(db, ifNotExists);
        SensorCallLogDao.createTable(db, ifNotExists);
        SensorBrowserHistoryDao.createTable(db, ifNotExists);
        SensorForegroundEventDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        SensorMeasurementLogDao.dropTable(db, ifExists);
        SensorAccelerometerDao.dropTable(db, ifExists);
        SensorActivityDao.dropTable(db, ifExists);
        SensorConnectionDao.dropTable(db, ifExists);
        SensorNetworkTrafficDao.dropTable(db, ifExists);
        SensorLightDao.dropTable(db, ifExists);
        SensorLocationDao.dropTable(db, ifExists);
        SensorRingtoneDao.dropTable(db, ifExists);
        SensorLoudnessDao.dropTable(db, ifExists);
        SensorAccountsReaderDao.dropTable(db, ifExists);
        SensorRunningProcessesDao.dropTable(db, ifExists);
        SensorRunningServicesDao.dropTable(db, ifExists);
        SensorRunningTasksDao.dropTable(db, ifExists);
        SensorContactDao.dropTable(db, ifExists);
        SensorContactNumberDao.dropTable(db, ifExists);
        SensorContactMailDao.dropTable(db, ifExists);
        SensorCalendarEventDao.dropTable(db, ifExists);
        SensorCalendarEventReminderDao.dropTable(db, ifExists);
        SensorCallLogDao.dropTable(db, ifExists);
        SensorBrowserHistoryDao.dropTable(db, ifExists);
        SensorForegroundEventDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(SensorMeasurementLogDao.class);
        registerDaoClass(SensorAccelerometerDao.class);
        registerDaoClass(SensorActivityDao.class);
        registerDaoClass(SensorConnectionDao.class);
        registerDaoClass(SensorNetworkTrafficDao.class);
        registerDaoClass(SensorLightDao.class);
        registerDaoClass(SensorLocationDao.class);
        registerDaoClass(SensorRingtoneDao.class);
        registerDaoClass(SensorLoudnessDao.class);
        registerDaoClass(SensorAccountsReaderDao.class);
        registerDaoClass(SensorRunningProcessesDao.class);
        registerDaoClass(SensorRunningServicesDao.class);
        registerDaoClass(SensorRunningTasksDao.class);
        registerDaoClass(SensorContactDao.class);
        registerDaoClass(SensorContactNumberDao.class);
        registerDaoClass(SensorContactMailDao.class);
        registerDaoClass(SensorCalendarEventDao.class);
        registerDaoClass(SensorCalendarEventReminderDao.class);
        registerDaoClass(SensorCallLogDao.class);
        registerDaoClass(SensorBrowserHistoryDao.class);
        registerDaoClass(SensorForegroundEventDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}

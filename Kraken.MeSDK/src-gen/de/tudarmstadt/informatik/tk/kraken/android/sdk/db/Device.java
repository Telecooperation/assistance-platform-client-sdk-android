package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "device".
 */
public class Device {

    private long id;
    private String device_identifier;
    private String os;
    private String os_version;
    private String brand;
    private String model;
    /** Not-null value. */
    private String created;
    private long device_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DeviceDao myDao;

    private Login login;
    private Long login__resolvedKey;


    public Device() {
    }

    public Device(long id) {
        this.id = id;
    }

    public Device(long id, String device_identifier, String os, String os_version, String brand, String model, String created, long device_id) {
        this.id = id;
        this.device_identifier = device_identifier;
        this.os = os;
        this.os_version = os_version;
        this.brand = brand;
        this.model = model;
        this.created = created;
        this.device_id = device_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDeviceDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getDevice_identifier() {
        return device_identifier;
    }

    public void setDevice_identifier(String device_identifier) {
        this.device_identifier = device_identifier;
    }

    public String getOs() {
        return os;
    }

    public void setOs(String os) {
        this.os = os;
    }

    public String getOs_version() {
        return os_version;
    }

    public void setOs_version(String os_version) {
        this.os_version = os_version;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    /** Not-null value. */
    public String getCreated() {
        return created;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated(String created) {
        this.created = created;
    }

    public long getDevice_id() {
        return device_id;
    }

    public void setDevice_id(long device_id) {
        this.device_id = device_id;
    }

    /** To-one relationship, resolved on first access. */
    public Login getLogin() {
        long __key = this.device_id;
        if (login__resolvedKey == null || !login__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LoginDao targetDao = daoSession.getLoginDao();
            Login loginNew = targetDao.load(__key);
            synchronized (this) {
                login = loginNew;
            	login__resolvedKey = __key;
            }
        }
        return login;
    }

    public void setLogin(Login login) {
        if (login == null) {
            throw new DaoException("To-one property 'device_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.login = login;
            device_id = login.getId();
            login__resolvedKey = device_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

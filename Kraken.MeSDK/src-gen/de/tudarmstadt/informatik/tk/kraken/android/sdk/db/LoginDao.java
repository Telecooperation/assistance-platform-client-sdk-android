package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.Login;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "login".
*/
public class LoginDao extends AbstractDao<Login, Long> {

    public static final String TABLENAME = "login";

    /**
     * Properties of entity Login.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Server_device_id = new Property(2, String.class, "server_device_id", false, "SERVER_DEVICE_ID");
        public final static Property Last_email = new Property(3, String.class, "last_email", false, "LAST_EMAIL");
        public final static Property Created = new Property(4, String.class, "created", false, "CREATED");
    };

    private DaoSession daoSession;


    public LoginDao(DaoConfig config) {
        super(config);
    }
    
    public LoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"login\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TOKEN\" TEXT NOT NULL ," + // 1: token
                "\"SERVER_DEVICE_ID\" TEXT," + // 2: server_device_id
                "\"LAST_EMAIL\" TEXT NOT NULL ," + // 3: last_email
                "\"CREATED\" TEXT NOT NULL );"); // 4: created
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_login__id ON login" +
                " (\"_id\");");
        db.execSQL("CREATE INDEX " + constraint + "IDX_login_TOKEN ON login" +
                " (\"TOKEN\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"login\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Login entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getToken());
 
        String server_device_id = entity.getServer_device_id();
        if (server_device_id != null) {
            stmt.bindString(3, server_device_id);
        }
        stmt.bindString(4, entity.getLast_email());
        stmt.bindString(5, entity.getCreated());
    }

    @Override
    protected void attachEntity(Login entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Login readEntity(Cursor cursor, int offset) {
        Login entity = new Login( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // server_device_id
            cursor.getString(offset + 3), // last_email
            cursor.getString(offset + 4) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Login entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setToken(cursor.getString(offset + 1));
        entity.setServer_device_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_email(cursor.getString(offset + 3));
        entity.setCreated(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Login entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Login entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.LoudnessEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "loudness_event".
*/
public class LoudnessEventDao extends AbstractDao<LoudnessEvent, Long> {

    public static final String TABLENAME = "loudness_event";

    /**
     * Properties of entity LoudnessEventRequest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Loudness = new Property(1, float.class, "loudness", false, "LOUDNESS");
        public final static Property Created = new Property(2, String.class, "created", false, "CREATED");
    };


    public LoudnessEventDao(DaoConfig config) {
        super(config);
    }
    
    public LoudnessEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"loudness_event\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"LOUDNESS\" REAL NOT NULL ," + // 1: loudness
                "\"CREATED\" TEXT NOT NULL );"); // 2: created
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_loudness_event__id ON loudness_event" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"loudness_event\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoudnessEvent entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindDouble(2, entity.getLoudness());
        stmt.bindString(3, entity.getCreated());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LoudnessEvent readEntity(Cursor cursor, int offset) {
        LoudnessEvent entity = new LoudnessEvent( //
            cursor.getLong(offset + 0), // id
            cursor.getFloat(offset + 1), // loudness
            cursor.getString(offset + 2) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoudnessEvent entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLoudness(cursor.getFloat(offset + 1));
        entity.setCreated(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LoudnessEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LoudnessEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

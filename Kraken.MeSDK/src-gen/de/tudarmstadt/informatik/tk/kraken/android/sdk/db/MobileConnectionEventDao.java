package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.MobileConnectionEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "mobile_connection_event".
*/
public class MobileConnectionEventDao extends AbstractDao<MobileConnectionEvent, Long> {

    public static final String TABLENAME = "mobile_connection_event";

    /**
     * Properties of entity MobileConnectionEventRequest.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property CarrierName = new Property(1, String.class, "carrierName", false, "CARRIER_NAME");
        public final static Property MobileCarrierCode = new Property(2, String.class, "mobileCarrierCode", false, "MOBILE_CARRIER_CODE");
        public final static Property MobileNetworkCode = new Property(3, String.class, "mobileNetworkCode", false, "MOBILE_NETWORK_CODE");
        public final static Property Created = new Property(4, String.class, "created", false, "CREATED");
        public final static Property VoipAvailable = new Property(5, Boolean.class, "voipAvailable", false, "VOIP_AVAILABLE");
    };


    public MobileConnectionEventDao(DaoConfig config) {
        super(config);
    }
    
    public MobileConnectionEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"mobile_connection_event\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"CARRIER_NAME\" TEXT," + // 1: carrierName
                "\"MOBILE_CARRIER_CODE\" TEXT," + // 2: mobileCarrierCode
                "\"MOBILE_NETWORK_CODE\" TEXT," + // 3: mobileNetworkCode
                "\"CREATED\" TEXT NOT NULL ," + // 4: created
                "\"VOIP_AVAILABLE\" INTEGER);"); // 5: voipAvailable
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_mobile_connection_event__id ON mobile_connection_event" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"mobile_connection_event\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MobileConnectionEvent entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String carrierName = entity.getCarrierName();
        if (carrierName != null) {
            stmt.bindString(2, carrierName);
        }
 
        String mobileCarrierCode = entity.getMobileCarrierCode();
        if (mobileCarrierCode != null) {
            stmt.bindString(3, mobileCarrierCode);
        }
 
        String mobileNetworkCode = entity.getMobileNetworkCode();
        if (mobileNetworkCode != null) {
            stmt.bindString(4, mobileNetworkCode);
        }
        stmt.bindString(5, entity.getCreated());
 
        Boolean voipAvailable = entity.getVoipAvailable();
        if (voipAvailable != null) {
            stmt.bindLong(6, voipAvailable ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MobileConnectionEvent readEntity(Cursor cursor, int offset) {
        MobileConnectionEvent entity = new MobileConnectionEvent( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // carrierName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobileCarrierCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobileNetworkCode
            cursor.getString(offset + 4), // created
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // voipAvailable
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MobileConnectionEvent entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCarrierName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobileCarrierCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobileNetworkCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreated(cursor.getString(offset + 4));
        entity.setVoipAvailable(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MobileConnectionEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MobileConnectionEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

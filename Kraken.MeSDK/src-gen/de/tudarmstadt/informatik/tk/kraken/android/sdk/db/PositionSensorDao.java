package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.PositionSensor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "position_sensor".
*/
public class PositionSensorDao extends AbstractDao<PositionSensor, Long> {

    public static final String TABLENAME = "position_sensor";

    /**
     * Properties of entity PositionSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Latitude = new Property(1, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, Double.class, "longitude", false, "LONGITUDE");
        public final static Property AccuracyHorizontal = new Property(3, Double.class, "accuracyHorizontal", false, "ACCURACY_HORIZONTAL");
        public final static Property Speed = new Property(4, Float.class, "speed", false, "SPEED");
        public final static Property Created = new Property(5, String.class, "created", false, "CREATED");
        public final static Property Altitude = new Property(6, Double.class, "altitude", false, "ALTITUDE");
        public final static Property AccuracyVertical = new Property(7, Double.class, "accuracyVertical", false, "ACCURACY_VERTICAL");
        public final static Property Course = new Property(8, Integer.class, "course", false, "COURSE");
        public final static Property Floor = new Property(9, Integer.class, "floor", false, "FLOOR");
    };


    public PositionSensorDao(DaoConfig config) {
        super(config);
    }
    
    public PositionSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"position_sensor\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"LATITUDE\" REAL," + // 1: latitude
                "\"LONGITUDE\" REAL," + // 2: longitude
                "\"ACCURACY_HORIZONTAL\" REAL," + // 3: accuracyHorizontal
                "\"SPEED\" REAL," + // 4: speed
                "\"CREATED\" TEXT NOT NULL ," + // 5: created
                "\"ALTITUDE\" REAL," + // 6: altitude
                "\"ACCURACY_VERTICAL\" REAL," + // 7: accuracyVertical
                "\"COURSE\" INTEGER," + // 8: course
                "\"FLOOR\" INTEGER);"); // 9: floor
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_position_sensor__id ON position_sensor" +
                " (\"_id\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"position_sensor\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PositionSensor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(2, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(3, longitude);
        }
 
        Double accuracyHorizontal = entity.getAccuracyHorizontal();
        if (accuracyHorizontal != null) {
            stmt.bindDouble(4, accuracyHorizontal);
        }
 
        Float speed = entity.getSpeed();
        if (speed != null) {
            stmt.bindDouble(5, speed);
        }
        stmt.bindString(6, entity.getCreated());
 
        Double altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindDouble(7, altitude);
        }
 
        Double accuracyVertical = entity.getAccuracyVertical();
        if (accuracyVertical != null) {
            stmt.bindDouble(8, accuracyVertical);
        }
 
        Integer course = entity.getCourse();
        if (course != null) {
            stmt.bindLong(9, course);
        }
 
        Integer floor = entity.getFloor();
        if (floor != null) {
            stmt.bindLong(10, floor);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PositionSensor readEntity(Cursor cursor, int offset) {
        PositionSensor entity = new PositionSensor( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // latitude
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // longitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // accuracyHorizontal
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // speed
            cursor.getString(offset + 5), // created
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // altitude
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // accuracyVertical
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // course
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // floor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PositionSensor entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLatitude(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLongitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAccuracyHorizontal(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setSpeed(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setCreated(cursor.getString(offset + 5));
        entity.setAltitude(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setAccuracyVertical(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setCourse(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFloor(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PositionSensor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PositionSensor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

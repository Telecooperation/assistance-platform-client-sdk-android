package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.SensorCallLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENSOR_CALL_LOG".
*/
public class SensorCallLogDao extends AbstractDao<SensorCallLog, Long> {

    public static final String TABLENAME = "SENSOR_CALL_LOG";

    /**
     * Properties of entity SensorCallLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CallId = new Property(1, Long.class, "callId", false, "CALL_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Number = new Property(4, String.class, "number", false, "NUMBER");
        public final static Property Date = new Property(5, Long.class, "date", false, "DATE");
        public final static Property Duration = new Property(6, Long.class, "duration", false, "DURATION");
        public final static Property Timestamp = new Property(7, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property IsNew = new Property(8, Boolean.class, "isNew", false, "IS_NEW");
        public final static Property IsUpdated = new Property(9, Boolean.class, "isUpdated", false, "IS_UPDATED");
        public final static Property IsDeleted = new Property(10, Boolean.class, "isDeleted", false, "IS_DELETED");
    };


    public SensorCallLogDao(DaoConfig config) {
        super(config);
    }
    
    public SensorCallLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENSOR_CALL_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CALL_ID\" INTEGER," + // 1: callId
                "\"TYPE\" INTEGER," + // 2: type
                "\"NAME\" TEXT," + // 3: name
                "\"NUMBER\" TEXT," + // 4: number
                "\"DATE\" INTEGER," + // 5: date
                "\"DURATION\" INTEGER," + // 6: duration
                "\"TIMESTAMP\" INTEGER," + // 7: timestamp
                "\"IS_NEW\" INTEGER," + // 8: isNew
                "\"IS_UPDATED\" INTEGER," + // 9: isUpdated
                "\"IS_DELETED\" INTEGER);"); // 10: isDeleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENSOR_CALL_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SensorCallLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long callId = entity.getCallId();
        if (callId != null) {
            stmt.bindLong(2, callId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(5, number);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(7, duration);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(8, timestamp);
        }
 
        Boolean isNew = entity.getIsNew();
        if (isNew != null) {
            stmt.bindLong(9, isNew ? 1L: 0L);
        }
 
        Boolean isUpdated = entity.getIsUpdated();
        if (isUpdated != null) {
            stmt.bindLong(10, isUpdated ? 1L: 0L);
        }
 
        Boolean isDeleted = entity.getIsDeleted();
        if (isDeleted != null) {
            stmt.bindLong(11, isDeleted ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SensorCallLog readEntity(Cursor cursor, int offset) {
        SensorCallLog entity = new SensorCallLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // callId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // number
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // timestamp
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isNew
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isUpdated
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0 // isDeleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SensorCallLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCallId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setTimestamp(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIsNew(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsUpdated(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsDeleted(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SensorCallLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SensorCallLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package de.tudarmstadt.informatik.tk.kraken.android.sdk.db;

import java.util.List;
import de.tudarmstadt.informatik.tk.kraken.android.sdk.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "SENSOR_CONTACT".
 */
public class SensorContact implements de.tudarmstadt.informatik.tk.kraken.android.sdk.interfaces.IDbUpdatableSensor {

    private Long id;
    private Long contactId;
    private Long globalContactId;
    private String displayName;
    private String givenName;
    private String familyName;
    private Integer starred;
    private Integer lastTimeContacted;
    private Integer timesContacted;
    private String note;
    private Long timestamp;
    private Boolean isNew;
    private Boolean isUpdated;
    private Boolean isDeleted;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SensorContactDao myDao;

    private List<SensorContactNumber> sensorContactNumberList;
    private List<SensorContactMail> sensorContactMailList;

    public SensorContact() {
    }

    public SensorContact(Long id) {
        this.id = id;
    }

    public SensorContact(Long id, Long contactId, Long globalContactId, String displayName, String givenName, String familyName, Integer starred, Integer lastTimeContacted, Integer timesContacted, String note, Long timestamp, Boolean isNew, Boolean isUpdated, Boolean isDeleted) {
        this.id = id;
        this.contactId = contactId;
        this.globalContactId = globalContactId;
        this.displayName = displayName;
        this.givenName = givenName;
        this.familyName = familyName;
        this.starred = starred;
        this.lastTimeContacted = lastTimeContacted;
        this.timesContacted = timesContacted;
        this.note = note;
        this.timestamp = timestamp;
        this.isNew = isNew;
        this.isUpdated = isUpdated;
        this.isDeleted = isDeleted;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSensorContactDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getContactId() {
        return contactId;
    }

    public void setContactId(Long contactId) {
        this.contactId = contactId;
    }

    public Long getGlobalContactId() {
        return globalContactId;
    }

    public void setGlobalContactId(Long globalContactId) {
        this.globalContactId = globalContactId;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public String getGivenName() {
        return givenName;
    }

    public void setGivenName(String givenName) {
        this.givenName = givenName;
    }

    public String getFamilyName() {
        return familyName;
    }

    public void setFamilyName(String familyName) {
        this.familyName = familyName;
    }

    public Integer getStarred() {
        return starred;
    }

    public void setStarred(Integer starred) {
        this.starred = starred;
    }

    public Integer getLastTimeContacted() {
        return lastTimeContacted;
    }

    public void setLastTimeContacted(Integer lastTimeContacted) {
        this.lastTimeContacted = lastTimeContacted;
    }

    public Integer getTimesContacted() {
        return timesContacted;
    }

    public void setTimesContacted(Integer timesContacted) {
        this.timesContacted = timesContacted;
    }

    public String getNote() {
        return note;
    }

    public void setNote(String note) {
        this.note = note;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    public Boolean getIsNew() {
        return isNew;
    }

    public void setIsNew(Boolean isNew) {
        this.isNew = isNew;
    }

    public Boolean getIsUpdated() {
        return isUpdated;
    }

    public void setIsUpdated(Boolean isUpdated) {
        this.isUpdated = isUpdated;
    }

    public Boolean getIsDeleted() {
        return isDeleted;
    }

    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SensorContactNumber> getSensorContactNumberList() {
        if (sensorContactNumberList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SensorContactNumberDao targetDao = daoSession.getSensorContactNumberDao();
            List<SensorContactNumber> sensorContactNumberListNew = targetDao._querySensorContact_SensorContactNumberList(id);
            synchronized (this) {
                if(sensorContactNumberList == null) {
                    sensorContactNumberList = sensorContactNumberListNew;
                }
            }
        }
        return sensorContactNumberList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSensorContactNumberList() {
        sensorContactNumberList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SensorContactMail> getSensorContactMailList() {
        if (sensorContactMailList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SensorContactMailDao targetDao = daoSession.getSensorContactMailDao();
            List<SensorContactMail> sensorContactMailListNew = targetDao._querySensorContact_SensorContactMailList(id);
            synchronized (this) {
                if(sensorContactMailList == null) {
                    sensorContactMailList = sensorContactMailListNew;
                }
            }
        }
        return sensorContactMailList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSensorContactMailList() {
        sensorContactMailList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
